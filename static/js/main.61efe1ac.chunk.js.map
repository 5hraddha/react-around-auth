{"version":3,"sources":["components/Hamburger.js","images/logo.svg","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/ImagePopup.js","components/PopupWithForm.js","utils/handleFormInputChange.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/DeletePlacePopup.js","components/Form.js","components/Register.js","components/Login.js","images/register-success.svg","images/register-failure.svg","components/InfoTooltip.js","components/Footer.js","components/ProtectedRoute.js","utils/api.js","utils/auth.js","components/App.js","index.js"],"names":["Hamburger","props","setIsMenuOpen","isMenuOpen","linkText","userEmail","onLogOut","buttonClassName","menuClassName","React","useEffect","className","type","onClick","Header","useState","window","innerWidth","windowWidth","setWindowWidth","headerClassName","timeoutId","handleWindowResize","clearTimeout","setTimeout","addEventListener","removeEventListener","src","pageLogo","alt","isLoggedIn","linkPath","to","setHeaderContent","CurrentUserContext","createContext","Card","card","onCardClick","onCardLike","onCardDeleteClick","currentUser","useContext","isOwn","owner","_id","cardDeleteButtonClassName","isLiked","likes","some","i","cardLikeButtonClassName","link","name","length","Main","cards","onEditProfileClick","onAddPlaceClick","onEditAvatarClick","avatar","about","map","ImagePopup","onClose","PopupWithForm","children","onSubmit","title","btnLabel","isOpen","formRef","createRef","isFormValid","setIsFormValid","current","checkValidity","submitButtonClassName","action","ref","onChange","noValidate","handleFormInputChange","e","inputArr","target","value","validity","validationMessage","filter","input","setValue","setValidity","setErrorMessage","valid","EditProfilePopup","isDataLoading","onUpdateUser","setName","description","setDescription","isNameValid","setIsNameValid","isDescriptionValid","setIsDescriptionValid","nameErrorMessage","setNameErrorMessage","descriptionErrorMessage","setDescriptionErrorMessage","handleInputChange","nameInputClassName","nameInputErrorClassName","aboutInputClassName","aboutInputErrorClassName","preventDefault","id","placeholder","minLength","maxLength","required","EditAvatarPopup","onUpdateAvatar","isImageLinkValid","setIsImageLinkValid","imageLinkErrorMessage","setImageLinkErrorMessage","imageLinkInputRef","useRef","linkInputClassName","linkInputErrorClassName","AddPlacePopup","onAddPlace","cardName","setCardName","cardImageLink","setCardImageLink","isCardNameValid","setIsCardNameValid","isCardImageLinkValid","setIsCardImageLinkValid","cardNameErrorMessage","setCardNameErrorMessage","cardImageLinkErrorMessage","setCardImageLinkErrorMessage","placeInputClassName","placeInputErrorClassName","DeletePlacePopup","onCardDelete","Form","Register","registerEmail","setRegisterEmail","registerPassword","setRegisterPassword","isRegisterEmailValid","setIsRegisterEmailValid","isRegisterPasswordValid","setIsRegisterPasswordValid","registerEmailErrorMessage","setRegisterEmailErrorMessage","registerPasswordErrorMessage","setRegisterPasswordErrorMessage","emailInputClassName","emailErrorClassName","passwordInputClassName","passwordErrorClassName","Login","loginEmail","setLoginEmail","loginPassword","setLoginPassword","isLoginEmailValid","setIsLoginEmailValid","isLoginPasswordValid","setIsLoginPasswordValid","loginEmailErrorMessage","setLoginEmailErrorMessage","loginPasswordErrorMessage","setLoginPasswordErrorMessage","InfoTooltip","isSuccess","tooltipImg","registerSuccess","registerFailure","tooltipMsg","Footer","ProtectedRoute","restProps","options","_checkResponseStatus","response","ok","json","Promise","reject","status","statusText","getInitialCards","fetch","_baseUrl","headers","_headers","then","addNewCard","cardPicUrl","method","body","JSON","stringify","deleteCard","cardId","changeLikeCardStatus","getUserData","updateUserData","updateUserAvatar","newAvatarUrl","this","baseUrl","authorization","register","email","password","login","validateUserToken","userToken","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isPreviewPlacePopupOpen","setIsPreviewPlacePopupOpen","isDeletePlacePopupOpen","setIsDeletePlacePopupOpen","isInfoTooltipPopupOpen","setIsInfoTooltipPopupOpen","userRegisterStatus","setUserRegisterStatus","setIsDataLoading","selectedCard","setSelectedCard","selectedToDeleteCard","setSelectedToDeleteCard","setCards","setCurrentUser","currentUserEmail","setCurrentUserEmail","setIsLoggedIn","history","useHistory","api","catch","err","console","log","res","isAnyPopupOpen","handleClickClose","classList","contains","closeAllPopups","handleEscClose","key","document","validateToken","useCallback","jwt","localStorage","getItem","auth","data","push","propsForMain","newCard","state","c","propsForEditAvatarPopup","updatedUserData","finally","propsForEditProfilePopup","userData","propsForAddPlacePopup","propsForImagePopup","propsForDeletePlacePopup","propsForRegister","propsForLogin","token","setItem","propsForHeaderRegister","propsForHeaderLogin","propsForHeaderProtected","removeItem","propsForInfoTooltip","Provider","path","exact","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.61efe1ac.chunk.js","sourcesContent":["import React          from 'react';\nimport PropTypes      from 'prop-types';\n\n/**\n * The **Hamburger** component representing the hamburger and its menu.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Hamburger(props){\n  const {\n    setIsMenuOpen,\n    isMenuOpen,\n    linkText,\n    userEmail,\n    onLogOut,\n  } = props;\n\n  const handleHamburgerIconClick = () => setIsMenuOpen(!isMenuOpen);\n  const handleNavClick = () => setIsMenuOpen(false);\n  const buttonClassName = `${(isMenuOpen) ? `hamburger__button hamburger__button_close` : `hamburger__button`}`;\n  const menuClassName = `${(isMenuOpen) ? `hamburger__menu hamburger__menu_visible` : `hamburger__menu`}`;\n\n  React.useEffect(() => {\n    setIsMenuOpen(false);\n  }, [setIsMenuOpen]);\n\n  return (\n    <div className=\"hamburger\">\n      <button\n        className={buttonClassName}\n        type=\"button\"\n        aria-label=\"Hamburger Button\"\n        onClick={handleHamburgerIconClick}>\n      </button>\n      <nav className={menuClassName} onClick={handleNavClick}>\n        <ul className=\"hamburger__menu-list\">\n          <li className=\"hamburger__menu-list-item\">\n            <p className=\"hamburger__text\">{userEmail}</p>\n          </li>\n          <li className=\"hamburger__menu-list-item\">\n            <button className=\"hamburger__logout-button\" onClick={onLogOut}>\n              {linkText}\n            </button>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nHamburger.propTypes = {\n  /** A React component state `isMenuOpen` setter callback to track the state of the menu */\n  setIsMenuOpen               : PropTypes.func.isRequired,\n  /** A React component state representing the state of the menu */\n  isMenuOpen                  : PropTypes.bool.isRequired,\n  /** A string representing the logout button label */\n  linkText                    : PropTypes.string.isRequired,\n  /** A string representing the email of the current logged in user */\n  userEmail                   : PropTypes.string,\n  /** A *callback function* that user logout */\n  onLogOut                    : PropTypes.func,\n}\n\nexport default Hamburger;\n","export default __webpack_public_path__ + \"static/media/logo.3755f99c.svg\";","import React        from 'react';\nimport PropTypes    from 'prop-types';\nimport {Link}       from 'react-router-dom';\nimport Hamburger    from './Hamburger';\nimport pageLogo     from '../images/logo.svg';\n\n/**\n * The **Header** component representing the header of the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Header(props) {\n  const [windowWidth, setWindowWidth] = React.useState(window.innerWidth);\n  const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n\n  const headerClassName = `${(isMenuOpen && windowWidth <= 550) ? `header header_menu-open` : `header`}`;\n\n  React.useEffect(() => {\n    let timeoutId = null;\n    const handleWindowResize = () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        setWindowWidth(window.innerWidth);\n      }, 150);\n    }\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    }\n  });\n\n  const setHeaderContent = () => {\n    if(!props.isLoggedIn) {\n      const { linkPath, linkText } = props;\n      return (\n        <nav className=\"header__menu\">\n          <Link className=\"header__link\" to={linkPath}>\n            {linkText}\n          </Link>\n        </nav>\n      );\n    }\n\n    if(props.isLoggedIn && windowWidth > 550) {\n      const { linkText, userEmail, onLogOut } = props;\n      return (\n        <nav className=\"header__menu\">\n          <ul className=\"header__menu-list\">\n            <li>\n              <p className=\"header__text\">{userEmail}</p>\n            </li>\n            <li>\n              <button className=\"header__button\" onClick={onLogOut}>\n                {linkText}\n              </button>\n            </li>\n          </ul>\n        </nav>\n      );\n    }\n\n    return <Hamburger setIsMenuOpen={setIsMenuOpen} isMenuOpen={isMenuOpen} {...props} />;\n  }\n\n  return (\n    <header className={headerClassName}>\n      <img className=\"logo\" src={pageLogo} alt=\"logo of the webpage having text around the US\" />\n      <div className=\"header__content\">\n        {setHeaderContent()}\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  /** A React component state tracking if the a user has been logged in */\n  isLoggedIn                  : PropTypes.bool.isRequired,\n  /** A React component state `isMenuOpen` setter callback to track the state of the menu */\n  setIsMenuOpen               : PropTypes.func,\n  /** A React component state representing the state of the menu */\n  isMenuOpen                  : PropTypes.bool,\n  /** A string representing the menu link path */\n  linkPath                    : PropTypes.string,\n  /** A string representing the menu link label */\n  linkText                    : PropTypes.string.isRequired,\n  /** A string representing the email of the current logged in user */\n  userEmail                   : PropTypes.string,\n  /** A *callback function* that user logout */\n  onLogOut                    : PropTypes.func,\n}\n\nexport default Header;\n","import React from 'react';\n\n/** A context having the value of the current user */\nconst CurrentUserContext = React.createContext();\nexport default CurrentUserContext;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The **Card** component representing an image card in the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Card(props){\n  const { card, onCardClick, onCardLike, onCardDeleteClick } = props;\n  const currentUser = React.useContext(CurrentUserContext);\n\n  // Check if the current user is the owner of the current card and set className for Delete button accordingly\n  const isOwn = card.owner._id === currentUser._id;\n  const cardDeleteButtonClassName = (\n    `element__delete-btn ${isOwn\n      ? 'element__delete-btn_visible'\n      : 'element__delete-btn_hidden'}`\n  );\n\n  // Check if the card was liked by the current user and set className for Like button accordingly\n  const isLiked = card.likes.some(i => i._id === currentUser._id);\n  const cardLikeButtonClassName = `element__like-btn ${(isLiked) && 'element__like-btn_active'}`;\n\n  const handleClick = () => onCardClick(card);\n  const handleLikeClick = () => onCardLike(card);\n  const handleDeleteClick = () => onCardDeleteClick(card);\n\n  return (\n    <li className=\"element\" key={card._id}>\n      <img className=\"element__img\" src={card.link} alt={card.name} onClick={handleClick} />\n      <div className=\"element__text\">\n        <h2 className=\"element__title\">{card.name}</h2>\n        <div className=\"element__likes\">\n          <button\n                  className={cardLikeButtonClassName}\n                  type=\"button\"\n                  aria-label=\"Like Image\"\n                  onClick={handleLikeClick}>\n          </button>\n          <p className=\"element__like-count\">{card.likes.length}</p>\n        </div>\n      </div>\n      <button\n              className={cardDeleteButtonClassName}\n              type=\"button\"\n              aria-label=\"Delete Image\"\n              onClick={handleDeleteClick}>\n      </button>\n    </li>\n  );\n}\n\nCard.propTypes = {\n  /** An *object* having single card data returned from the *API* */\n  card                : PropTypes.object.isRequired,\n  /** A *callback function* that handles click event on the image card */\n  onCardClick         : PropTypes.func.isRequired,\n  /** A *callback function* that handles click event on the like button */\n  onCardLike          : PropTypes.func.isRequired,\n  /** A *callback function* that handles click event on the delete button */\n  onCardDeleteClick   : PropTypes.func.isRequired,\n};\n\nexport default Card;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport Card                 from './Card';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The **Main** component representing the main content of the webpage.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Main(props) {\n  const { cards } = props;\n  const {\n    onEditProfileClick,\n    onAddPlaceClick,\n    onEditAvatarClick,\n    onCardClick,\n    onCardDeleteClick,\n    onCardLike,\n  } = props;\n\n  const currentUser = React.useContext(CurrentUserContext);\n\n  return (\n      <main>\n        {/* section containing user info, functionality to edit it and to add new images */}\n        <section className=\"profile\">\n          <div className=\"profile__avatar-container\">\n            <img className=\"profile__avatar\" src={currentUser.avatar} alt=\"profile avatar\" />\n            <button\n                    className=\"profile__avatar-update-button\"\n                    type=\"button\"\n                    aria-label=\"Update Profile Picture\"\n                    onClick={onEditAvatarClick}>\n            </button>\n          </div>\n          <div className=\"profile__info\">\n            <div className=\"profile__main-content\">\n              <h1 className=\"profile__title\">{currentUser.name}</h1>\n              <button\n                      className=\"profile__edit-btn\"\n                      type=\"button\"\n                      aria-label=\"Edit Profile\"\n                      onClick={onEditProfileClick}>\n              </button>\n            </div>\n            <p className=\"profile__subtitle\">{currentUser.about}</p>\n          </div>\n          <button\n                  className=\"profile__add-btn\"\n                  type=\"button\"\n                  aria-label=\"Add Image\"\n                  onClick={onAddPlaceClick}>\n          </button>\n        </section>\n\n        {/* section containing all the cards having images and functionality to like/unlike */}\n        <section>\n          <ul className=\"elements\">\n            {cards.map(card =>\n              <Card\n                key={card._id}\n                card={card}\n                onCardClick={onCardClick}\n                onCardLike={onCardLike}\n                onCardDeleteClick={onCardDeleteClick} />)}\n          </ul>\n        </section>\n      </main>\n  );\n}\n\nMain.propTypes = {\n  /** An *array* of the existing cards fetched from the server */\n  cards: PropTypes.array.isRequired,\n  /** A *callback function* that handles click on edit profile button */\n  onEditProfileClick: PropTypes.func.isRequired,\n  /** A *callback function* that handles click on add new place button */\n  onAddPlaceClick   : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on edit avatar button */\n  onEditAvatarClick : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on image card */\n  onCardClick       : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on trash icon on the image card */\n  onCardDeleteClick : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on like button */\n  onCardLike        : PropTypes.func.isRequired,\n}\n\nexport default Main;","import React      from 'react';\nimport PropTypes  from 'prop-types';\n\n/**\n * The **ImagePopup** component representing image preview popup\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction ImagePopup(props) {\n  const {card, onClose} = props;\n  return (\n    <div className={`popup popup_rel_image ${card && 'popup_opened'}`}>\n      <div className=\"popup__container popup__container_rel_image\">\n        <figure className=\"popup__figure\">\n          <img className=\"popup__img\" src={`${card && card.link}`} alt={`${card && card.name}`} />\n          <figcaption className=\"popup__caption\">{`${card && card.name}`}</figcaption>\n        </figure>\n        <button\n                className=\"popup__close-btn popup__close-btn_rel_image\"\n                type=\"button\"\n                onClick={onClose}\n                aria-label=\"Close popup\">\n        </button>\n      </div>\n    </div>\n  );\n}\n\nImagePopup.propTypes = {\n  /** An *object* having selected card data */\n  card    : PropTypes.object,\n  /** A *callback function* that handles closing of the popup */\n  onClose : PropTypes.func.isRequired,\n}\n\nexport default ImagePopup;","import React      from 'react';\nimport PropTypes  from 'prop-types';\n\n/**\n * The **PopupWithForm** component representing a popup with a form in it\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction PopupWithForm(props) {\n  const { children }                        = props;\n  const { onClose, onSubmit }               = props;\n  const { name, title, btnLabel, isOpen }   = props;\n  const formRef                             = React.createRef();\n  const [isFormValid, setIsFormValid]       = React.useState(false);\n\n  React.useEffect(() => {\n    setIsFormValid(formRef.current.checkValidity());\n  }, [isOpen, formRef]);\n\n  const handleChange = () => {\n    setIsFormValid(formRef.current.checkValidity());\n  }\n\n  const submitButtonClassName = `popup__submit popup__submit_rel_${name} ${!isFormValid && `popup__submit_disabled`}`;\n\n  return (\n    <div className={`popup popup_rel_${name} ${isOpen && 'popup_opened'}`}>\n    <div className=\"popup__container\">\n      <form\n        className=\"popup__form\"\n        name={name}\n        action=\"#\"\n        ref={formRef}\n        onSubmit={onSubmit}\n        onChange={handleChange}\n        noValidate>\n\n          <h2 className={`popup__title popup__title_rel_${name}`}>{title}</h2>\n\n          {children}\n\n          <button className={submitButtonClassName} type=\"submit\" aria-label={`${btnLabel} ${name}`}>\n            {btnLabel}\n          </button>\n\n      </form>\n      <button className=\"popup__close-btn\" type=\"button\" aria-label=\"Close popup\" onClick={onClose} />\n    </div>\n  </div>\n  );\n}\n\nPopupWithForm.propTypes = {\n  /** Any form elements like input, label, etc */\n  children  : PropTypes.any,\n  /** A *callback function* that handles closing of the popup */\n  onClose   : PropTypes.func.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit   : PropTypes.func.isRequired,\n  /** A string representing the **name of the form** */\n  name      : PropTypes.string.isRequired,\n  /** A string representing the **title of the form** */\n  title     : PropTypes.string.isRequired,\n  /** A string representing the **label** of the Submit button */\n  btnLabel  : PropTypes.string.isRequired,\n  /** A boolean indicating if the popup is open or closed */\n  isOpen    : PropTypes.bool,\n}\n\nexport default PopupWithForm;","/**\n * This module sets the input value, checks if the input is valid and sets error message if any.\n * @module handleFormInputChange\n */\n\nconst handleFormInputChange = (e, inputArr) => {\n  const {name, value, validity, validationMessage} = e.target;\n  const inputChanged = inputArr.filter(input => input.name === name);\n\n  const { setValue, setValidity, setErrorMessage } = inputChanged[0];\n  setValue(value);\n  setValidity(validity.valid);\n  (!validity.valid) && setErrorMessage(validationMessage);\n}\n\nexport default handleFormInputChange;\n","import React                 from 'react';\nimport PropTypes             from 'prop-types';\nimport PopupWithForm         from './PopupWithForm';\nimport CurrentUserContext    from '../contexts/CurrentUserContext';\nimport handleFormInputChange from '../utils/handleFormInputChange';\n\n/**\n * The **EditProfilePopup** component representing a popup with a form to update the current user data\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction EditProfilePopup(props) {\n  const {isOpen, isDataLoading, onClose, onUpdateUser}        = props;\n  const [name, setName]                                       = React.useState('');\n  const [description, setDescription]                         = React.useState('');\n  const [isNameValid, setIsNameValid]                         = React.useState(true);\n  const [isDescriptionValid, setIsDescriptionValid]           = React.useState(true);\n  const [nameErrorMessage, setNameErrorMessage]               = React.useState('');\n  const [descriptionErrorMessage, setDescriptionErrorMessage] = React.useState('');\n  const currentUser                                           = React.useContext(CurrentUserContext);\n\n  const inputArr = [\n    {\n      name: 'title',\n      setValue: setName,\n      setValidity: setIsNameValid,\n      setErrorMessage: setNameErrorMessage,\n    },\n    {\n      name: 'subtitle',\n      setValue: setDescription,\n      setValidity: setIsDescriptionValid,\n      setErrorMessage: setDescriptionErrorMessage,\n    }\n  ];\n\n  React.useEffect(() => {\n    setName(currentUser.name || '');\n    setDescription(currentUser.about || '');\n    setIsNameValid(true);\n    setIsDescriptionValid(true);\n    setNameErrorMessage('');\n    setDescriptionErrorMessage('');\n  }, [currentUser, isOpen]);\n\n  const handleInputChange = (e) => handleFormInputChange(e, inputArr);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onUpdateUser({\n      name,\n      about: description,\n    });\n  }\n\n  const nameInputClassName = `popup__input ${(!isNameValid) && `popup__input_type_error`}`;\n  const nameInputErrorClassName = `popup__error ${(!isNameValid) && `popup__error_visible`}`;\n  const aboutInputClassName = `popup__input ${(!isDescriptionValid) && `popup__input_type_error`}`;\n  const aboutInputErrorClassName = `popup__error ${(!isDescriptionValid) && `popup__error_visible`}`;\n\n  return (\n    <PopupWithForm\n      name=\"profile\"\n      title=\"Edit profile\"\n      btnLabel={(isDataLoading) ? 'Saving': 'Save'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit} >\n\n        <input\n          className={nameInputClassName}\n          type=\"text\"\n          id=\"name-input\"\n          name=\"title\"\n          placeholder=\"Name\"\n          minLength=\"2\"\n          maxLength=\"40\"\n          onChange={handleInputChange}\n          value={name}\n          required />\n        <span id=\"name-input-error\" className={nameInputErrorClassName}>\n          {nameErrorMessage}\n        </span>\n\n        <input\n          className={aboutInputClassName}\n          type=\"text\"\n          id=\"about-input\"\n          name=\"subtitle\"\n          placeholder=\"About me\"\n          minLength=\"2\"\n          maxLength=\"200\"\n          onChange={handleInputChange}\n          value={description}\n          required />\n        <span id=\"about-input-error\" className={aboutInputErrorClassName}>\n          {descriptionErrorMessage}\n        </span>\n\n    </PopupWithForm>\n  );\n}\n\nEditProfilePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `PATCH` request to the API for updating the current user data  */\n  onUpdateUser    : PropTypes.func.isRequired,\n}\n\nexport default EditProfilePopup;","import React            from 'react';\nimport PropTypes        from 'prop-types';\nimport PopupWithForm    from './PopupWithForm';\n\n/**\n * The **EditAvatarPopup** component representing a popup with a form to edit user avatar\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction EditAvatarPopup(props) {\n  const {isOpen, isDataLoading, onClose, onUpdateAvatar}  = props;\n  const [isImageLinkValid, setIsImageLinkValid]           = React.useState(true);\n  const [imageLinkErrorMessage, setImageLinkErrorMessage] = React.useState('');\n  const imageLinkInputRef                                 = React.useRef();\n\n  React.useEffect(() => {\n    imageLinkInputRef.current.value = '';\n    setIsImageLinkValid(true);\n  }, [isOpen]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onUpdateAvatar(imageLinkInputRef.current.value);\n  }\n\n  const handleCheckValidity = e => {\n    setIsImageLinkValid(e.target.validity.valid);\n    setImageLinkErrorMessage(imageLinkInputRef.current.validationMessage);\n  }\n\n  const linkInputClassName = `popup__input ${(!isImageLinkValid) && `popup__input_type_error`}`;\n  const linkInputErrorClassName = `popup__error ${(!isImageLinkValid) && `popup__error_visible`}`;\n\n  return (\n    <PopupWithForm\n      name=\"avatar\"\n      title=\"Change Profile Picture\"\n      btnLabel={(isDataLoading) ? 'Saving': 'Save'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit} >\n\n        <input\n          className={linkInputClassName}\n          type=\"url\"\n          id=\"avatarlink-input\"\n          name=\"avatarlink\"\n          placeholder=\"Image link\"\n          ref={imageLinkInputRef}\n          onChange={handleCheckValidity}\n          required />\n        <span id=\"avatarlink-input-error\" className={linkInputErrorClassName}>\n          {imageLinkErrorMessage}\n        </span>\n\n    </PopupWithForm>\n  );\n}\n\nEditAvatarPopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `PATCH` request to the API for updating the current user's avatar  */\n  onUpdateAvatar  : PropTypes.func.isRequired,\n}\n\nexport default EditAvatarPopup;","import React                  from 'react';\nimport PropTypes              from 'prop-types';\nimport PopupWithForm          from './PopupWithForm';\nimport handleFormInputChange  from '../utils/handleFormInputChange';\n\n/**\n * The **AddPlacePopup** component representing a popup with a form to add a new place\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction AddPlacePopup(props){\n  const {isOpen, isDataLoading, onClose, onAddPlace}              = props;\n  const [cardName, setCardName]                                   = React.useState('');\n  const [cardImageLink, setCardImageLink]                         = React.useState('');\n  const [isCardNameValid, setIsCardNameValid]                     = React.useState(true);\n  const [isCardImageLinkValid, setIsCardImageLinkValid]           = React.useState(true);\n  const [cardNameErrorMessage, setCardNameErrorMessage]           = React.useState('');\n  const [cardImageLinkErrorMessage, setCardImageLinkErrorMessage] = React.useState('');\n\n  const inputArr = [\n    {\n      name: 'name',\n      setValue: setCardName,\n      setValidity: setIsCardNameValid,\n      setErrorMessage: setCardNameErrorMessage,\n    },\n    {\n      name: 'link',\n      setValue: setCardImageLink,\n      setValidity: setIsCardImageLinkValid,\n      setErrorMessage: setCardImageLinkErrorMessage,\n    }\n  ];\n\n  React.useEffect(() => {\n    setCardName('');\n    setCardImageLink('');\n    setIsCardNameValid(true);\n    setIsCardImageLinkValid(true);\n    setCardNameErrorMessage('');\n    setCardImageLinkErrorMessage('');\n  }, [isOpen]);\n\n  const handleInputChange = (e) => handleFormInputChange(e, inputArr);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if((isCardNameValid && isCardImageLinkValid)\n      || (cardName !== '' && cardImageLink !== '')){\n      onAddPlace(cardName, cardImageLink);\n    }\n  }\n\n  const placeInputClassName = `popup__input ${(!isCardNameValid) && `popup__input_type_error`}`;\n  const placeInputErrorClassName = `popup__error ${(!isCardNameValid) && `popup__error_visible`}`;\n  const linkInputClassName = `popup__input ${(!isCardImageLinkValid) && `popup__input_type_error`}`;\n  const linkInputErrorClassName = `popup__error ${(!isCardImageLinkValid) && `popup__error_visible`}`;\n\n  return (\n    <PopupWithForm\n      name=\"place\"\n      title=\"New Place\"\n      btnLabel={(isDataLoading) ? 'Creating': 'Create'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}>\n\n        <input\n          className={placeInputClassName}\n          type=\"text\"\n          id=\"place-input\"\n          name=\"name\"\n          placeholder=\"Title\"\n          minLength=\"1\"\n          maxLength=\"30\"\n          value={cardName}\n          onChange={handleInputChange}\n          required />\n        <span id=\"place-input-error\" className={placeInputErrorClassName}>\n          {cardNameErrorMessage}\n        </span>\n\n        <input\n          className={linkInputClassName}\n          type=\"url\"\n          id=\"link-input\"\n          name=\"link\"\n          placeholder=\"Image link\"\n          value={cardImageLink}\n          onChange={handleInputChange}\n          required />\n        <span id=\"link-input-error\" className={linkInputErrorClassName}>\n          {cardImageLinkErrorMessage}\n        </span>\n\n    </PopupWithForm>\n  );\n}\n\nAddPlacePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `POST` request to the API for adding a new place  */\n  onAddPlace      : PropTypes.func.isRequired,\n}\n\nexport default AddPlacePopup;","import React          from \"react\";\nimport PropTypes      from 'prop-types';\nimport PopupWithForm  from \"./PopupWithForm\";\n\n/**\n * The **DeletePlacePopup** component representing a popup to confirm the deletion of the selected card\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction DeletePlacePopup(props){\n  const {card, isOpen, isDataLoading, onClose, onCardDelete} = props;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onCardDelete(card);\n  }\n\n  return (\n    <PopupWithForm\n      name=\"delete\"\n      title=\"Are you sure?\"\n      btnLabel={(isDataLoading) ? 'Deleting': 'Yes'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit} />\n  );\n}\n\nDeletePlacePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `DELETE` request to the API for deleting an existing image card */\n  onCardDelete    : PropTypes.func.isRequired,\n}\n\nexport default DeletePlacePopup;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport {Link}               from 'react-router-dom';\n\n/**\n * The **Form** component representing user authorization and registration related forms.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Form(props){\n  const {\n    name,\n    title,\n    btnLabel,\n    linkPath,\n    linkText,\n    onSubmit,\n    children,\n  }                                         = props;\n  const formRef                             = React.createRef();\n  const [isFormValid, setIsFormValid]       = React.useState(false);\n\n  const buttonClassName = `form__submit ${!isFormValid && `form__submit_disabled`}`;\n\n  const handleChange = () => {\n    setIsFormValid(formRef.current.checkValidity());\n  }\n\n  return (\n    <form\n      className=\"form\"\n      name={name}\n      action=\"#\"\n      ref={formRef}\n      onSubmit={onSubmit}\n      onChange={handleChange}\n      noValidate>\n\n      <h2 className=\"form__title\">{title}</h2>\n\n      {children}\n\n      <button className={buttonClassName} type=\"submit\" aria-label={`${btnLabel} ${name}`}>\n        {btnLabel}\n      </button>\n\n      <Link to={linkPath} className=\"form__link\">\n        {linkText}\n      </Link>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  /** A string representing the **name of the form** */\n  name                : PropTypes.string.isRequired,\n  /** A string representing the **title of the form** */\n  title               : PropTypes.string.isRequired,\n  /** A string representing the **label** of the Submit button */\n  btnLabel            : PropTypes.string.isRequired,\n  /** A string representing the **route path** of the link below the submit button */\n  linkPath            : PropTypes.string.isRequired,\n  /** A string representing the **text** of the link below the submit button */\n  linkText            : PropTypes.string.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit            : PropTypes.func.isRequired,\n  /** Any form elements like input, label, etc */\n  children            : PropTypes.any.isRequired,\n};\n\nexport default Form;\n","import React                  from 'react';\nimport PropTypes              from 'prop-types';\nimport Form                   from './Form';\nimport handleFormInputChange  from '../utils/handleFormInputChange';\n\n/**\n * The **Register** component representing user registration form.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Register(props){\n  const {\n    isDataLoading,\n    onSubmit,\n    registerEmail,\n    setRegisterEmail,\n    registerPassword,\n    setRegisterPassword,\n  }  = props;\n  const [isRegisterEmailValid, setIsRegisterEmailValid]                 = React.useState(true);\n  const [isRegisterPasswordValid, setIsRegisterPasswordValid]           = React.useState(true);\n  const [registerEmailErrorMessage, setRegisterEmailErrorMessage]       = React.useState('');\n  const [registerPasswordErrorMessage, setRegisterPasswordErrorMessage] = React.useState('');\n\n  const emailInputClassName = `form__input ${(!isRegisterEmailValid) && `form__input_type_error`}`;\n  const emailErrorClassName = `form__error ${(!isRegisterEmailValid) && `form__error_visible`}`;\n  const passwordInputClassName = `form__input ${(!isRegisterPasswordValid) && `form__input_type_error`}`;\n  const passwordErrorClassName = `form__error ${(!isRegisterPasswordValid) && `form__error_visible`}`;\n\n  const inputArr = [\n    {\n      name: 'register-email',\n      setValue: setRegisterEmail,\n      setValidity: setIsRegisterEmailValid,\n      setErrorMessage: setRegisterEmailErrorMessage,\n    },\n    {\n      name: 'register-password',\n      setValue: setRegisterPassword,\n      setValidity: setIsRegisterPasswordValid,\n      setErrorMessage: setRegisterPasswordErrorMessage,\n    }\n  ];\n\n  React.useEffect(() => {\n    setRegisterEmail('');\n    setRegisterPassword('');\n    setIsRegisterEmailValid(true);\n    setIsRegisterPasswordValid(true);\n    setRegisterEmailErrorMessage('');\n    setRegisterPasswordErrorMessage('');\n  }, [setRegisterEmail, setRegisterPassword]);\n\n  const handleInputChange = (e) => handleFormInputChange(e, inputArr);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if((isRegisterEmailValid && isRegisterPasswordValid)\n      || (registerEmail !== '' && registerPassword !== '')){\n      onSubmit({registerEmail, registerPassword});\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      <section className='auth-form'>\n        <Form\n          name=\"register\"\n          title=\"Sign up\"\n          btnLabel={(isDataLoading) ? 'Signing up': 'Sign up'}\n          linkPath=\"/login\"\n          linkText=\"Already a member? Log in here!\"\n          onSubmit={handleSubmit}>\n\n          <input\n            className={emailInputClassName}\n            type=\"email\"\n            id=\"register-email\"\n            name=\"register-email\"\n            placeholder=\"Email\"\n            value={registerEmail}\n            onChange={handleInputChange}\n            required />\n          <span id=\"register-email-error\" className={emailErrorClassName}>\n              {registerEmailErrorMessage}\n          </span>\n\n          <input\n            className={passwordInputClassName}\n            type=\"password\"\n            id=\"register-password\"\n            name=\"register-password\"\n            placeholder=\"Password\"\n            value={registerPassword}\n            minLength=\"8\"\n            onChange={handleInputChange}\n            required />\n          <span id=\"register-password-error\" className={passwordErrorClassName}>\n              {registerPasswordErrorMessage}\n          </span>\n\n        </Form>\n      </section>\n    </div>\n  );\n}\n\nRegister.propTypes = {\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading       : PropTypes.bool.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit            : PropTypes.func.isRequired,\n  /** A React component state representing the register email of the user */\n  registerEmail          : PropTypes.string.isRequired,\n  /** A React component state `registerEmail` setter callback to set the register email of the user */\n  setRegisterEmail       : PropTypes.func.isRequired,\n  /** A React component state representing the register password of the user */\n  registerPassword       : PropTypes.string.isRequired,\n  /** A React component state `registerPassword` setter callback to set the register password of the user */\n  setRegisterPassword    : PropTypes.func.isRequired,\n};\n\nexport default Register;\n","import React                  from 'react';\nimport PropTypes              from 'prop-types';\nimport Form                   from './Form';\nimport handleFormInputChange  from '../utils/handleFormInputChange';\n\n/**\n * The **Login** component representing user authorization or login form.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Login(props){\n  const {\n    isDataLoading,\n    onSubmit,\n    loginEmail,\n    setLoginEmail,\n    loginPassword,\n    setLoginPassword,\n  }  = props;\n  const [isLoginEmailValid, setIsLoginEmailValid]                 = React.useState(true);\n  const [isLoginPasswordValid, setIsLoginPasswordValid]           = React.useState(true);\n  const [loginEmailErrorMessage, setLoginEmailErrorMessage]       = React.useState('');\n  const [loginPasswordErrorMessage, setLoginPasswordErrorMessage] = React.useState('');\n\n  const emailInputClassName = `form__input ${(!isLoginEmailValid) && `form__input_type_error`}`;\n  const emailErrorClassName = `form__error ${(!isLoginEmailValid) && `form__error_visible`}`;\n  const passwordInputClassName = `form__input ${(!isLoginPasswordValid) && `form__input_type_error`}`;\n  const passwordErrorClassName = `form__error ${(!isLoginPasswordValid) && `form__error_visible`}`;\n\n  const inputArr = [\n    {\n      name: 'login-email',\n      setValue: setLoginEmail,\n      setValidity: setIsLoginEmailValid,\n      setErrorMessage: setLoginEmailErrorMessage,\n    },\n    {\n      name: 'login-password',\n      setValue: setLoginPassword,\n      setValidity: setIsLoginPasswordValid,\n      setErrorMessage: setLoginPasswordErrorMessage,\n    }\n  ];\n\n  React.useEffect(() => {\n    setIsLoginEmailValid(true);\n    setIsLoginPasswordValid(true);\n    setLoginEmailErrorMessage('');\n    setLoginPasswordErrorMessage('');\n  }, []);\n\n  const handleInputChange = (e) => handleFormInputChange(e, inputArr);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if((isLoginEmailValid && isLoginPasswordValid)\n        || (loginEmail !== '' && loginPassword !== '')){\n      onSubmit({loginEmail, loginPassword});\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      <section className='auth-form'>\n        <Form\n          name=\"login\"\n          title=\"Log in\"\n          btnLabel={(isDataLoading) ? 'Logging in': 'Log in'}\n          linkPath=\"/register\"\n          linkText=\"Not a member yet? Sign up here!\"\n          onSubmit={handleSubmit}>\n\n          <input\n            className={emailInputClassName}\n            type=\"email\"\n            id=\"login-email\"\n            name=\"login-email\"\n            placeholder=\"Email\"\n            value={loginEmail}\n            onChange={handleInputChange}\n            required />\n          <span id=\"login-email-error\" className={emailErrorClassName}>\n              {loginEmailErrorMessage}\n          </span>\n\n          <input\n            className={passwordInputClassName}\n            type=\"password\"\n            id=\"login-password\"\n            name=\"login-password\"\n            placeholder=\"Password\"\n            value={loginPassword}\n            minLength=\"8\"\n            onChange={handleInputChange}\n            required />\n          <span id=\"login-password-error\" className={passwordErrorClassName}>\n              {loginPasswordErrorMessage}\n          </span>\n\n        </Form>\n      </section>\n    </div>\n  );\n}\n\nLogin.propTypes = {\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading       : PropTypes.bool.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit            : PropTypes.func.isRequired,\n  /** A React component state representing the login email of the user */\n  loginEmail          : PropTypes.string.isRequired,\n  /** A React component state `loginEmail` setter callback to set the login email of the user */\n  setLoginEmail       : PropTypes.func.isRequired,\n  /** A React component state representing the login password of the user */\n  loginPassword       : PropTypes.string.isRequired,\n  /** A React component state `loginPassword` setter callback to set the login password of the user */\n  setLoginPassword    : PropTypes.func.isRequired,\n};\n\nexport default Login;\n","export default __webpack_public_path__ + \"static/media/register-success.1b6082f8.svg\";","export default __webpack_public_path__ + \"static/media/register-failure.df8eddf6.svg\";","import React              from 'react';\nimport PropTypes          from 'prop-types';\nimport registerSuccess    from '../images/register-success.svg';\nimport registerFailure    from '../images/register-failure.svg';\n\n/**\n * The **InfoTooltip** component representing a popup to tell the status of user registration\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction InfoTooltip(props){\n  const {\n    name,\n    isOpen,\n    isSuccess,\n    onClose,\n  } = props;\n\n  const tooltipImg = `${(isSuccess) ? registerSuccess : registerFailure}`;\n  const tooltipMsg = `${(isSuccess)\n    ? `Success! You have now been registered.`\n    : `Oops, something went wrong! Please try again.`}`;\n\n  return (\n    <div className={`popup popup_rel_${name} ${isOpen && 'popup_opened'}`}>\n      <div className=\"popup__container\">\n        <img className=\"popup__tooltip-img\" src={tooltipImg} alt=\"Tooltip icon\" />\n        <p className=\"popup__tooltip-msg\">{tooltipMsg}</p>\n        <button\n          className=\"popup__tooltip-close-btn\"\n          type=\"button\"\n          aria-label=\"Close popup\"\n          onClick={onClose}>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nInfoTooltip.propTypes = {\n  /** A string representing the **name of the popup** */\n  name            : PropTypes.string.isRequired,\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the user registration was successful or not */\n  isSuccess       : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n}\n\nexport default InfoTooltip;\n","import React from 'react';\n\n/**\n * The **Footer** component representing the footer of the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <p className=\"footer__text\">© 2021 Around The U.S.</p>\n    </footer>\n  );\n}\n\nexport default Footer;","import React              from 'react';\nimport PropTypes          from 'prop-types';\nimport {Route, Redirect}  from 'react-router-dom';\n\n/**\n * The **ProtectedRoute* component representing a route accessible to only logged in users\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction ProtectedRoute({children, isLoggedIn, ...restProps}) {\n  return (\n    <Route {...restProps}>\n      {\n        isLoggedIn\n        ? children\n        : <Redirect to=\"/login\" />\n      }\n    </Route>\n  );\n}\n\nProtectedRoute.propTypes = {\n  /** Any HTML or React Component that are children of ProtectedRoute component */\n  children: PropTypes.any.isRequired,\n  /** A boolean indicating if the user is logged in or not */\n  isLoggedIn: PropTypes.bool.isRequired,\n  /** An object containing the remaining props passed to ProtectedRoute component */\n  restProps: PropTypes.object,\n}\n\nexport default ProtectedRoute;\n","/**\n * This module takes care of all the requests made to the API - https://around.nomoreparties.co\n * @module Api\n */\n\n/** Class representing all the API related requests */\nclass Api {\n  /**\n   * Sets the base URL and header authorization token for the API endpoints.\n   * @param {options} obj - An object having the base URL and headers\n   */\n  constructor(options){\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  /**\n   * Checks the server's response of the Fetch API call to tell whether it was successful or not.\n   * @param {Object} response The response of the Fetch API call.\n   * @return {Object} If the response was successful, returns the JSON else a Promise object with a given reason.\n   */\n  _checkResponseStatus = response => {\n    return (response.ok)\n      ? response.json()\n      : Promise.reject(`Error Code: ${response.status} | Error Message: ${response.statusText}`);\n  }\n\n  /**\n   * Get initial image cards from the server using a GET request.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  getInitialCards = () => {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Adds a new image card to the server using a POST request.\n   * @param {string} cardName The name of the place in the new image card.\n   * @param {string} cardPicUrl The URL of the picture in the new image card.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  addNewCard = (cardName, cardPicUrl) => {\n    return fetch(`${this._baseUrl}/cards`,{\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardName,\n        link: cardPicUrl\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Deletes an existing image card from the server using a DELETE request.\n   * @param {string} cardId The id of image card to be deleted.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  deleteCard = cardId => {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Changes the like status of an existing image card from the server using a PUT | DELETE request.\n   * @param {string} cardId The id of image card to be liked.\n   * @param {boolean} isLiked Whether the image card has been liked already\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  changeLikeCardStatus = (cardId, isLiked) => {\n    const method = (isLiked) ? 'DELETE' : 'PUT';\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method,\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Get the current user data from the server using a GET request.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  getUserData = () => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Updates the current user data from the server using a PATCH request.\n   * @param {string} title The new title or name of the current user.\n   * @param {string} subtitle The new subtitle or about info of the current user.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  updateUserData = ({name, about}) => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about,\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Updates the current user's avatar from the server using a PATCH request.\n   * @param {string} newAvatarUrl The new URL of the user avatar.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  updateUserAvatar = newAvatarUrl => {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: newAvatarUrl\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n}\n\nexport default new Api({\n  baseUrl: \"https://around.nomoreparties.co/v1/group-12\",\n  headers: {\n    authorization: \"9bc9c0f1-5a8a-40aa-b985-20e7b24d1389\",\n    \"Content-Type\": \"application/json\"\n  }\n});","/**\n * This module enables API requests related to registration and authorization using API - https://register.nomoreparties.co\n * @module Auth\n */\n\n/** Class representing all the registration and authorization related requests */\nclass Auth {\n  constructor(options){\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  /**\n   * Checks the server's response of the Fetch API call to tell whether it was successful or not.\n   * @param {Object} response The response of the Fetch API call.\n   * @return {Object} If the response was successful, returns the JSON else a Promise object with a given reason.\n   */\n  _checkResponseStatus = response => {\n    if(response.ok){\n      return response.json();\n    }\n    return Promise.reject(response);\n  }\n\n  /**\n   * Register new user to the server using a POST request.\n   * @param {string} email The email ID of the user trying to register.\n   * @param {string} password The password of the user trying to register.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  register = (email, password) => {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password,\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Login a registered user to the server using a POST request.\n   * @param {string} email The email ID of the user trying to login.\n   * @param {string} password The password of the user trying to login.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  login = (email, password) => {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password,\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Validate a registered user's token to the server using a GET request.\n   * @param {string} userToken The token of the user trying to validate.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  validateUserToken = (userToken) => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        ...this._headers,\n        \"Authorization\" : `Bearer ${userToken}`,\n      }\n    })\n      .then(this._checkResponseStatus);\n  }\n}\n\nexport default new Auth({\n  baseUrl: \"https://register.nomoreparties.co\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n","import React                from 'react';\nimport\n{\n  Switch,\n  Route,\n  useHistory,\n}                           from 'react-router-dom';\nimport Header               from './Header';\nimport Main                 from './Main';\nimport ImagePopup           from './ImagePopup';\nimport EditProfilePopup     from './EditProfilePopup';\nimport EditAvatarPopup      from './EditAvatarPopup';\nimport AddPlacePopup        from './AddPlacePopup';\nimport DeletePlacePopup     from './DeletePlacePopup';\nimport Register             from './Register';\nimport Login                from './Login';\nimport InfoTooltip          from './InfoTooltip';\nimport Footer               from './Footer';\nimport ProtectedRoute       from './ProtectedRoute';\nimport api                  from '../utils/api';\nimport auth                 from '../utils/auth';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The main React **App** component.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction App() {\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen]   = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen]     = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen]         = React.useState(false);\n  const [isPreviewPlacePopupOpen, setIsPreviewPlacePopupOpen] = React.useState(false);\n  const [isDeletePlacePopupOpen, setIsDeletePlacePopupOpen]   = React.useState(false);\n  const [isInfoTooltipPopupOpen, setIsInfoTooltipPopupOpen]   = React.useState(false);\n  const [userRegisterStatus, setUserRegisterStatus]           = React.useState(false);\n  const [isDataLoading, setIsDataLoading]                     = React.useState(false);\n  const [selectedCard, setSelectedCard]                       = React.useState(null);\n  const [selectedToDeleteCard, setSelectedToDeleteCard]       = React.useState(null);\n  const [cards, setCards]                                     = React.useState([]);\n  const [currentUser, setCurrentUser]                         = React.useState({});\n  const [currentUserEmail, setCurrentUserEmail]               = React.useState('');\n  const [isLoggedIn, setIsLoggedIn]                           = React.useState(false);\n  const [registerEmail, setRegisterEmail]                     = React.useState('');\n  const [registerPassword, setRegisterPassword]               = React.useState('');\n  const [loginEmail, setLoginEmail]                           = React.useState('');\n  const [loginPassword, setLoginPassword]                     = React.useState('');\n  const history                                               = useHistory();\n\n// ********************************************************************************************* //\n//                      Fetch initial cards & user data on page load                             //\n// ********************************************************************************************* //\n  React.useEffect(() => {\n    api\n      .getInitialCards()\n        .then(setCards)\n        .catch(err => {\n          console.log(\"Uh-oh! Error occurred while fetching the existing cards from the server.\");\n          console.log(err);\n        });\n  }, []);\n\n  React.useEffect(() => {\n    api\n      .getUserData()\n      .then(res => setCurrentUser(res))\n      .catch(err => {\n        console.log(\"Uh-oh! Error occurred while fetching the current user data from the server.\");\n        console.log(err);\n      });\n  }, []);\n\n// ********************************************************************************************* //\n//                        Handle mouse click or Esc key down event                               //\n// ********************************************************************************************* //\n  const isAnyPopupOpen = (\n    isEditProfilePopupOpen\n    || isEditAvatarPopupOpen\n    || isAddPlacePopupOpen\n    || isPreviewPlacePopupOpen\n    || isDeletePlacePopupOpen\n    || isInfoTooltipPopupOpen);\n\n  React.useEffect(() => {\n    const handleClickClose = e => {\n      if(e.target.classList.contains('popup_opened')) {\n        closeAllPopups();\n      }\n    }\n\n    const handleEscClose = e => {\n      if(e.key === \"Escape\"){\n        closeAllPopups();\n      }\n    }\n\n    if(isAnyPopupOpen){\n        document.addEventListener(\"click\", handleClickClose);\n        document.addEventListener(\"keydown\", handleEscClose);\n    }\n\n    return () => {\n      document.removeEventListener(\"click\", handleClickClose);\n      document.removeEventListener(\"keydown\", handleEscClose);\n    }\n  }, [isAnyPopupOpen] );\n\n  const closeAllPopups = () => {\n    setIsEditProfilePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsPreviewPlacePopupOpen(false);\n    setIsDeletePlacePopupOpen(false);\n    setIsInfoTooltipPopupOpen(false);\n    setSelectedCard(null);\n    setSelectedToDeleteCard(null);\n  }\n\n// ********************************************************************************************* //\n//                         Handle all the events on the web page                                 //\n// ********************************************************************************************* //\n  const handleEditProfileClick = () => setIsEditProfilePopupOpen(true);\n  const handleEditAvatarClick = () => setIsEditAvatarPopupOpen(true);\n  const handleAddPlaceClick = () => setIsAddPlacePopupOpen(true);\n\n  const handleCardClick = card => {\n    setSelectedCard(card);\n    setIsPreviewPlacePopupOpen(true);\n  };\n\n  const handleCardDeleteClick = card => {\n    setSelectedToDeleteCard(card);\n    setIsDeletePlacePopupOpen(true);\n  };\n\n  const handleCardLike = card => {\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    api\n      .changeLikeCardStatus(card._id, isLiked)\n        .then(newCard =>\n          setCards(state => state.map(c => c._id === card._id ? newCard : c)))\n        .catch(err => {\n          console.log('Uh-oh! Error occurred while changing the like status of the card.');\n          console.log(err);\n        });\n  }\n\n  const handleCardDeleteSubmit = card => {\n    setIsDataLoading(true);\n    api\n      .deleteCard(card._id)\n        .then(() => {\n          setCards(state => state.filter(c => c._id !== card._id));\n          closeAllPopups();\n        })\n        .catch(err => {\n          console.log('Uh-oh! Error occurred while deleting the selected card from the server.');\n          console.log(err);\n        })\n        .finally(() => setIsDataLoading(false));\n  }\n\n  const handleUpdateUser = userData => {\n    setIsDataLoading(true);\n    api\n      .updateUserData(userData)\n      .then(updatedUserData => {\n        setCurrentUser(updatedUserData);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log('Uh-oh! Error occurred while updating the user data to the server.');\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const handleUpdateAvatar = newAvatarUrl => {\n    setIsDataLoading(true);\n    api\n      .updateUserAvatar(newAvatarUrl)\n      .then(updatedUserData => {\n        setCurrentUser(updatedUserData);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log('Uh-oh! Error occurred while updating the user avatar to the server.');\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const handleAddPlaceSubmit = (cardName, cardImageLink) => {\n    setIsDataLoading(true);\n    api\n      .addNewCard(cardName, cardImageLink)\n      .then(newCard => {\n        setCards([newCard, ...cards]);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log('Uh-oh! Error occurred while adding a new card to the server.');\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const handleRegisterSubmit = () => {\n    setIsDataLoading(true);\n    auth\n      .register(registerEmail, registerPassword)\n      .then(() => {\n        setUserRegisterStatus(true);\n        history.push('/login');\n      })\n      .catch(err => {\n        setUserRegisterStatus(false);\n        console.log('Uh-oh! Error occurred while registering a new user.');\n        if(err.status === 400){\n          console.log('One of the fields was filled in incorrectly while user registration.');\n        }\n      })\n      .finally(() => {\n        setIsDataLoading(false);\n        setIsInfoTooltipPopupOpen(true);\n        // Close the InfoTooltip popup after 2 sec\n        let timeoutId = null;\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          setIsInfoTooltipPopupOpen(false);\n        }, 2000);\n      });\n  }\n\n  const handleLoginSubmit = () => {\n    setIsDataLoading(true);\n    auth\n      .login(loginEmail, loginPassword)\n      .then(res => {\n        if(!res.token){\n          return;\n        }\n        localStorage.setItem('token', res.token);\n        setCurrentUserEmail(loginEmail);\n        setLoginEmail('');\n        setLoginPassword('');\n        setIsLoggedIn(true);\n        history.push('/');\n      })\n      .catch(err => {\n        console.log('Uh-oh! Error occurred while logging in.');\n        if(err.status === 400){\n          console.log('One or more of the fields were not provided while logging in.');\n        }\n        if(err.status === 401){\n          console.log('The user with the specified email not found.');\n        }\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const validateToken = React.useCallback(() => {\n    const jwt = localStorage.getItem('token');\n    if(jwt){\n      auth\n        .validateUserToken(jwt)\n        .then(res => {\n          if(!res){\n            return;\n          }\n          setCurrentUserEmail(res.data.email);\n          setIsLoggedIn(true);\n          history.push('/');\n        })\n        .catch(err => {\n          console.log('Uh-oh! Error occurred while validating token.');\n          if(err.status === 400){\n            console.log('Token not provided or provided in the wrong format.');\n          }\n          if(err.status === 401){\n            console.log('The provided token is invalid.');\n          }\n        });\n    }\n  }, [history]);\n\n  const handleLogOut = () => {\n    localStorage.removeItem('token');\n    history.push('/login');\n    setIsLoggedIn(false);\n    setCurrentUserEmail('');\n  }\n\n// ********************************************************************************************* //\n//                                Validate user token on page load                               //\n// ********************************************************************************************* //\n  React.useEffect(() => {\n    validateToken();\n  }, [validateToken]);\n\n// ********************************************************************************************* //\n//                 Create props objects to pass to the React Components                          //\n// ********************************************************************************************* //\n  const propsForMain = {\n    onEditProfileClick: handleEditProfileClick,\n    onAddPlaceClick:    handleAddPlaceClick,\n    onEditAvatarClick:  handleEditAvatarClick,\n    onCardClick:        handleCardClick,\n    onCardDeleteClick:  handleCardDeleteClick,\n    onCardLike:         handleCardLike,\n    cards,\n  };\n\n  const propsForEditAvatarPopup = {\n    isOpen:         isEditAvatarPopupOpen,\n    isDataLoading:  isDataLoading,\n    onClose:        closeAllPopups,\n    onUpdateAvatar: handleUpdateAvatar,\n  };\n\n  const propsForEditProfilePopup = {\n    isOpen:         isEditProfilePopupOpen,\n    isDataLoading:  isDataLoading,\n    onClose:        closeAllPopups,\n    onUpdateUser:   handleUpdateUser,\n  };\n\n  const propsForAddPlacePopup = {\n    isOpen:         isAddPlacePopupOpen,\n    isDataLoading:  isDataLoading,\n    onClose:        closeAllPopups,\n    onAddPlace:     handleAddPlaceSubmit,\n  }\n\n  const propsForImagePopup = {\n    card:     selectedCard,\n    onClose:  closeAllPopups,\n  }\n\n  const propsForDeletePlacePopup = {\n    card:           selectedToDeleteCard,\n    isOpen:         isDeletePlacePopupOpen,\n    isDataLoading:  isDataLoading,\n    onClose:        closeAllPopups,\n    onCardDelete:   handleCardDeleteSubmit,\n  }\n\n  const propsForRegister = {\n    isDataLoading,\n    onSubmit: handleRegisterSubmit,\n    registerEmail,\n    setRegisterEmail,\n    registerPassword,\n    setRegisterPassword,\n  }\n\n  const propsForLogin = {\n    isDataLoading,\n    onSubmit: handleLoginSubmit,\n    loginEmail,\n    setLoginEmail,\n    loginPassword,\n    setLoginPassword,\n  }\n\n  const propsForHeaderRegister = {\n    isLoggedIn,\n    linkPath: '/login',\n    linkText: 'Log in',\n  }\n\n  const propsForHeaderLogin = {\n    isLoggedIn,\n    linkPath: '/register',\n    linkText: 'Sign up',\n  }\n\n  const propsForHeaderProtected = {\n    isLoggedIn,\n    linkText: 'Log out',\n    userEmail: currentUserEmail,\n    onLogOut: handleLogOut,\n  }\n\n  const propsForInfoTooltip = {\n    name:         'tooltip',\n    isOpen:       isInfoTooltipPopupOpen,\n    isSuccess:    userRegisterStatus,\n    onClose:      closeAllPopups,\n  }\n\n// ********************************************************************************************* //\n//                       Return different views of the application                               //\n// ********************************************************************************************* //\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <div className=\"page__wrapper\">\n          <Route path=\"/register\">\n            <Header {...propsForHeaderRegister} />\n            <Register {...propsForRegister} />\n          </Route>\n\n          <Route path=\"/login\">\n            <Header {...propsForHeaderLogin} />\n            <Login {...propsForLogin} />\n          </Route>\n\n          <Switch>\n            <ProtectedRoute exact path=\"/\" isLoggedIn={isLoggedIn}>\n              <Header {...propsForHeaderProtected} />\n              <Main {...propsForMain} />\n              <EditAvatarPopup {...propsForEditAvatarPopup} />\n              <EditProfilePopup {...propsForEditProfilePopup} />\n              <AddPlacePopup {...propsForAddPlacePopup} />\n              <ImagePopup {...propsForImagePopup} />\n              <DeletePlacePopup {...propsForDeletePlacePopup} />\n              <Footer />\n            </ProtectedRoute>\n          </Switch>\n          <InfoTooltip {...propsForInfoTooltip} />\n        </div>\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n","import React            from 'react';\nimport ReactDOM         from 'react-dom';\nimport {BrowserRouter}  from 'react-router-dom';\nimport App              from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}