{"version":3,"sources":["components/Hamburger.js","images/logo.svg","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/ImagePopup.js","hooks/useFormAndValidation.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/DeletePlacePopup.js","components/Form.js","components/Register.js","components/Login.js","images/register-success.svg","images/register-failure.svg","components/InfoTooltip.js","components/Footer.js","components/ProtectedRoute.js","utils/api.js","utils/auth.js","components/App.js","index.js"],"names":["Hamburger","props","setIsMenuOpen","isMenuOpen","linkText","userEmail","onLogOut","buttonClassName","menuClassName","React","useEffect","className","type","onClick","Header","useState","window","innerWidth","windowWidth","setWindowWidth","headerClassName","timeoutId","handleWindowResize","clearTimeout","setTimeout","addEventListener","removeEventListener","src","pageLogo","alt","isLoggedIn","linkPath","to","setHeaderContent","CurrentUserContext","createContext","Card","card","onCardClick","onCardLike","onCardDeleteClick","currentUser","useContext","isOwn","owner","_id","cardDeleteButtonClassName","isLiked","likes","some","i","cardLikeButtonClassName","link","name","length","Main","cards","onEditProfileClick","onAddPlaceClick","onEditAvatarClick","avatar","about","map","ImagePopup","onClose","useFormAndValidation","inputNamesArr","initialValues","inputName","values","setValues","errors","setErrors","isValid","setIsValid","resetForm","useCallback","newValues","newErrors","newIsValid","handleChange","e","target","value","validationMessage","closest","checkValidity","PopupWithForm","children","onSubmit","title","btnLabel","isOpen","formRef","createRef","isFormValid","setIsFormValid","current","submitButtonClassName","action","ref","onChange","noValidate","EditProfilePopup","isDataLoading","onUpdateUser","initialInputValues","subtitle","handleInputChange","nameInputClassName","nameInputErrorClassName","aboutInputClassName","aboutInputErrorClassName","preventDefault","id","placeholder","minLength","maxLength","required","EditAvatarPopup","onUpdateAvatar","avatarlink","linkInputClassName","linkInputErrorClassName","AddPlacePopup","onAddPlace","placeInputClassName","placeInputErrorClassName","DeletePlacePopup","onCardDelete","Form","Register","registerEmail","setRegisterEmail","registerPassword","setRegisterPassword","emailInputClassName","emailErrorClassName","passwordInputClassName","passwordErrorClassName","Login","loginEmail","setLoginEmail","loginPassword","setLoginPassword","InfoTooltip","isSuccess","tooltipImg","registerSuccess","registerFailure","tooltipMsg","Footer","Date","getFullYear","ProtectedRoute","restProps","options","_checkResponseStatus","response","ok","json","Promise","reject","status","statusText","getInitialCards","fetch","_baseUrl","headers","_headers","then","addNewCard","cardName","cardPicUrl","method","body","JSON","stringify","deleteCard","cardId","changeLikeCardStatus","getUserData","updateUserData","updateUserAvatar","newAvatarUrl","this","baseUrl","authorization","register","email","password","login","validateUserToken","userToken","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isPreviewPlacePopupOpen","setIsPreviewPlacePopupOpen","isDeletePlacePopupOpen","setIsDeletePlacePopupOpen","isInfoTooltipPopupOpen","setIsInfoTooltipPopupOpen","userRegisterStatus","setUserRegisterStatus","setIsDataLoading","selectedCard","setSelectedCard","selectedToDeleteCard","setSelectedToDeleteCard","setCards","setCurrentUser","currentUserEmail","setCurrentUserEmail","setIsLoggedIn","history","useHistory","api","catch","err","console","log","res","isAnyPopupOpen","handleClickClose","classList","contains","closeAllPopups","handleEscClose","key","document","validateToken","jwt","localStorage","getItem","auth","data","push","propsForMain","newCard","state","c","propsForEditAvatarPopup","updatedUserData","finally","propsForEditProfilePopup","userData","propsForAddPlacePopup","cardImageLink","propsForImagePopup","propsForDeletePlacePopup","filter","propsForRegister","propsForLogin","token","setItem","propsForHeaderRegister","propsForHeaderLogin","propsForHeaderProtected","removeItem","propsForInfoTooltip","Provider","path","exact","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.f69d424d.chunk.js","sourcesContent":["import React          from 'react';\nimport PropTypes      from 'prop-types';\n\n/**\n * The **Hamburger** component representing the hamburger and its menu.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Hamburger(props){\n  const {\n    setIsMenuOpen,\n    isMenuOpen,\n    linkText,\n    userEmail,\n    onLogOut,\n  } = props;\n\n  const handleHamburgerIconClick = () => setIsMenuOpen(!isMenuOpen);\n  const handleNavClick = () => setIsMenuOpen(false);\n  const buttonClassName = `${(isMenuOpen) ? `hamburger__button hamburger__button_close` : `hamburger__button`}`;\n  const menuClassName = `${(isMenuOpen) ? `hamburger__menu hamburger__menu_visible` : `hamburger__menu`}`;\n\n  React.useEffect(() => {\n    setIsMenuOpen(false);\n  }, [setIsMenuOpen]);\n\n  return (\n    <div className=\"hamburger\">\n      <button\n        className={buttonClassName}\n        type=\"button\"\n        aria-label=\"Hamburger Button\"\n        onClick={handleHamburgerIconClick}>\n      </button>\n      <nav className={menuClassName} onClick={handleNavClick}>\n        <ul className=\"hamburger__menu-list\">\n          <li className=\"hamburger__menu-list-item\">\n            <p className=\"hamburger__text\">{userEmail}</p>\n          </li>\n          <li className=\"hamburger__menu-list-item\">\n            <button className=\"hamburger__logout-button\" onClick={onLogOut}>\n              {linkText}\n            </button>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nHamburger.propTypes = {\n  /** A React component state `isMenuOpen` setter callback to track the state of the menu */\n  setIsMenuOpen               : PropTypes.func.isRequired,\n  /** A React component state representing the state of the menu */\n  isMenuOpen                  : PropTypes.bool.isRequired,\n  /** A string representing the logout button label */\n  linkText                    : PropTypes.string.isRequired,\n  /** A string representing the email of the current logged in user */\n  userEmail                   : PropTypes.string,\n  /** A *callback function* that user logout */\n  onLogOut                    : PropTypes.func,\n}\n\nexport default Hamburger;\n","export default __webpack_public_path__ + \"static/media/logo.3755f99c.svg\";","import React        from 'react';\nimport PropTypes    from 'prop-types';\nimport {Link}       from 'react-router-dom';\nimport Hamburger    from './Hamburger';\nimport pageLogo     from '../images/logo.svg';\n\n/**\n * The **Header** component representing the header of the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Header(props) {\n  const [windowWidth, setWindowWidth] = React.useState(window.innerWidth);\n  const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n\n  const headerClassName = `${(isMenuOpen && windowWidth <= 550) ? `header header_menu-open` : `header`}`;\n\n  React.useEffect(() => {\n    let timeoutId = null;\n    const handleWindowResize = () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        setWindowWidth(window.innerWidth);\n      }, 150);\n    }\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    }\n  });\n\n  const setHeaderContent = () => {\n    if(!props.isLoggedIn) {\n      const { linkPath, linkText } = props;\n      return (\n        <nav className=\"header__menu\">\n          <Link className=\"header__link\" to={linkPath}>\n            {linkText}\n          </Link>\n        </nav>\n      );\n    }\n\n    if(props.isLoggedIn && windowWidth > 550) {\n      const { linkText, userEmail, onLogOut } = props;\n      return (\n        <nav className=\"header__menu\">\n          <ul className=\"header__menu-list\">\n            <li>\n              <p className=\"header__text\">{userEmail}</p>\n            </li>\n            <li>\n              <button className=\"header__button\" onClick={onLogOut}>\n                {linkText}\n              </button>\n            </li>\n          </ul>\n        </nav>\n      );\n    }\n\n    return <Hamburger setIsMenuOpen={setIsMenuOpen} isMenuOpen={isMenuOpen} {...props} />;\n  }\n\n  return (\n    <header className={headerClassName}>\n      <img className=\"logo\" src={pageLogo} alt=\"logo of the webpage having text around the US\" />\n      <div className=\"header__content\">\n        {setHeaderContent()}\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  /** A React component state tracking if the a user has been logged in */\n  isLoggedIn                  : PropTypes.bool.isRequired,\n  /** A React component state `isMenuOpen` setter callback to track the state of the menu */\n  setIsMenuOpen               : PropTypes.func,\n  /** A React component state representing the state of the menu */\n  isMenuOpen                  : PropTypes.bool,\n  /** A string representing the menu link path */\n  linkPath                    : PropTypes.string,\n  /** A string representing the menu link label */\n  linkText                    : PropTypes.string.isRequired,\n  /** A string representing the email of the current logged in user */\n  userEmail                   : PropTypes.string,\n  /** A *callback function* that user logout */\n  onLogOut                    : PropTypes.func,\n}\n\nexport default Header;\n","import React from 'react';\n\n/** A context having the value of the current user */\nconst CurrentUserContext = React.createContext();\nexport default CurrentUserContext;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The **Card** component representing an image card in the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Card(props){\n  const { card, onCardClick, onCardLike, onCardDeleteClick } = props;\n  const currentUser = React.useContext(CurrentUserContext);\n\n  // Check if the current user is the owner of the current card and set className for Delete button accordingly\n  const isOwn = card.owner._id === currentUser._id;\n  const cardDeleteButtonClassName = (\n    `element__delete-btn ${isOwn\n      ? 'element__delete-btn_visible'\n      : 'element__delete-btn_hidden'}`\n  );\n\n  // Check if the card was liked by the current user and set className for Like button accordingly\n  const isLiked = card.likes.some(i => i._id === currentUser._id);\n  const cardLikeButtonClassName = `element__like-btn ${(isLiked) && 'element__like-btn_active'}`;\n\n  const handleClick = () => onCardClick(card);\n  const handleLikeClick = () => onCardLike(card);\n  const handleDeleteClick = () => onCardDeleteClick(card);\n\n  return (\n    <li className=\"element\">\n      <img className=\"element__img\" src={card.link} alt={card.name} onClick={handleClick} />\n      <div className=\"element__text\">\n        <h2 className=\"element__title\">{card.name}</h2>\n        <div className=\"element__likes\">\n          <button\n            className={cardLikeButtonClassName}\n            type=\"button\"\n            aria-label=\"Like Image\"\n            onClick={handleLikeClick} />\n          <p className=\"element__like-count\">{card.likes.length}</p>\n        </div>\n      </div>\n      <button\n        className={cardDeleteButtonClassName}\n        type=\"button\"\n        aria-label=\"Delete Image\"\n        onClick={handleDeleteClick} />\n    </li>\n  );\n}\n\nCard.propTypes = {\n  /** An *object* having single card data returned from the *API* */\n  card                : PropTypes.object.isRequired,\n  /** A *callback function* that handles click event on the image card */\n  onCardClick         : PropTypes.func.isRequired,\n  /** A *callback function* that handles click event on the like button */\n  onCardLike          : PropTypes.func.isRequired,\n  /** A *callback function* that handles click event on the delete button */\n  onCardDeleteClick   : PropTypes.func.isRequired,\n};\n\nexport default Card;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport Card                 from './Card';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The **Main** component representing the main content of the webpage.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Main(props) {\n  const { cards } = props;\n  const {\n    onEditProfileClick,\n    onAddPlaceClick,\n    onEditAvatarClick,\n    onCardClick,\n    onCardDeleteClick,\n    onCardLike,\n  } = props;\n\n  const currentUser = React.useContext(CurrentUserContext);\n\n  return (\n      <main>\n        {/* section containing user info, functionality to edit it and to add new images */}\n        <section className=\"profile\">\n          <div className=\"profile__avatar-container\">\n            <img className=\"profile__avatar\" src={currentUser.avatar} alt=\"profile avatar\" />\n            <button\n              className=\"profile__avatar-update-button\"\n              type=\"button\"\n              aria-label=\"Update Profile Picture\"\n              onClick={onEditAvatarClick} />\n          </div>\n          <div className=\"profile__info\">\n            <div className=\"profile__main-content\">\n              <h1 className=\"profile__title\">{currentUser.name}</h1>\n              <button\n                className=\"profile__edit-btn\"\n                type=\"button\"\n                aria-label=\"Edit Profile\"\n                onClick={onEditProfileClick} />\n            </div>\n            <p className=\"profile__subtitle\">{currentUser.about}</p>\n          </div>\n          <button\n            className=\"profile__add-btn\"\n            type=\"button\"\n            aria-label=\"Add Image\"\n            onClick={onAddPlaceClick} />\n        </section>\n\n        {/* section containing all the cards having images and functionality to like/unlike */}\n        <section>\n          <ul className=\"elements\">\n            {cards.map((card) => (\n              <Card\n                key={card._id}\n                card={card}\n                onCardClick={onCardClick}\n                onCardLike={onCardLike}\n                onCardDeleteClick={onCardDeleteClick}\n              />)\n            )}\n          </ul>\n        </section>\n      </main>\n  );\n}\n\nMain.propTypes = {\n  /** An *array* of the existing cards fetched from the server */\n  cards: PropTypes.array.isRequired,\n  /** A *callback function* that handles click on edit profile button */\n  onEditProfileClick: PropTypes.func.isRequired,\n  /** A *callback function* that handles click on add new place button */\n  onAddPlaceClick   : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on edit avatar button */\n  onEditAvatarClick : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on image card */\n  onCardClick       : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on trash icon on the image card */\n  onCardDeleteClick : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on like button */\n  onCardLike        : PropTypes.func.isRequired,\n}\n\nexport default Main;","import React      from 'react';\nimport PropTypes  from 'prop-types';\n\n/**\n * The **ImagePopup** component representing image preview popup\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction ImagePopup(props) {\n  const {card, onClose} = props;\n  return (\n    <div className={`popup popup_rel_image ${card && 'popup_opened'}`}>\n      <div className=\"popup__container popup__container_rel_image\">\n        <figure className=\"popup__figure\">\n          <img className=\"popup__img\" src={`${card && card.link}`} alt={`${card && card.name}`} />\n          <figcaption className=\"popup__caption\">{`${card && card.name}`}</figcaption>\n        </figure>\n        <button\n                className=\"popup__close-btn popup__close-btn_rel_image\"\n                type=\"button\"\n                onClick={onClose}\n                aria-label=\"Close popup\">\n        </button>\n      </div>\n    </div>\n  );\n}\n\nImagePopup.propTypes = {\n  /** An *object* having selected card data */\n  card    : PropTypes.object,\n  /** A *callback function* that handles closing of the popup */\n  onClose : PropTypes.func.isRequired,\n}\n\nexport default ImagePopup;","import React from 'react';\n\n/**\n * A custom hook to use form and enable validation on form fields\n *\n * @param {Array} inputNamesArr - An array of names of all the input fields of the form.\n * @returns {Object} - An object having all the necessary properties and methods to work with the form and enable validation.\n */\nexport function useFormAndValidation(inputNamesArr) {\n  const initialValues = {};\n  inputNamesArr.map(inputName => initialValues[inputName] = '');\n  const [ values, setValues ]   = React.useState(initialValues);\n  const [ errors, setErrors ]   = React.useState(initialValues);\n  const [ isValid, setIsValid ] = React.useState(true);\n\n  const handleChange = (e) => {\n    const {name, value, validationMessage} = e.target\n    setValues({...values, [name]: value });\n    setErrors({...errors, [name]: validationMessage});\n    setIsValid(e.target.closest('form').checkValidity());\n  };\n\n  const resetForm = React.useCallback((newValues = {}, newErrors = {}, newIsValid = false) => {\n    setValues(newValues);\n    setErrors(newErrors);\n    setIsValid(newIsValid);\n  }, [setValues, setErrors, setIsValid]);\n\n  return { values, isValid, errors, handleChange, resetForm };\n}\n","import React      from 'react';\nimport PropTypes  from 'prop-types';\n\n/**\n * The **PopupWithForm** component representing a popup with a form in it\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction PopupWithForm(props) {\n  const { children }                        = props;\n  const { onClose, onSubmit }               = props;\n  const { name, title, btnLabel, isOpen }   = props;\n  const formRef                             = React.createRef();\n  const [isFormValid, setIsFormValid]       = React.useState(false);\n\n  React.useEffect(() => {\n    setIsFormValid(formRef.current.checkValidity());\n  }, [isOpen, formRef]);\n\n  const handleChange = () => {\n    setIsFormValid(formRef.current.checkValidity());\n  }\n\n  const submitButtonClassName = `popup__submit popup__submit_rel_${name} ${!isFormValid && `popup__submit_disabled`}`;\n\n  return (\n    <div className={`popup popup_rel_${name} ${isOpen && 'popup_opened'}`}>\n    <div className=\"popup__container\">\n      <form\n        className=\"popup__form\"\n        name={name}\n        action=\"#\"\n        ref={formRef}\n        onSubmit={onSubmit}\n        onChange={handleChange}\n        noValidate>\n\n          <h2 className={`popup__title popup__title_rel_${name}`}>{title}</h2>\n\n          {children}\n\n          <button className={submitButtonClassName} type=\"submit\" aria-label={`${btnLabel} ${name}`}>\n            {btnLabel}\n          </button>\n\n      </form>\n      <button className=\"popup__close-btn\" type=\"button\" aria-label=\"Close popup\" onClick={onClose} />\n    </div>\n  </div>\n  );\n}\n\nPopupWithForm.propTypes = {\n  /** Any form elements like input, label, etc */\n  children  : PropTypes.any,\n  /** A *callback function* that handles closing of the popup */\n  onClose   : PropTypes.func.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit   : PropTypes.func.isRequired,\n  /** A string representing the **name of the form** */\n  name      : PropTypes.string.isRequired,\n  /** A string representing the **title of the form** */\n  title     : PropTypes.string.isRequired,\n  /** A string representing the **label** of the Submit button */\n  btnLabel  : PropTypes.string.isRequired,\n  /** A boolean indicating if the popup is open or closed */\n  isOpen    : PropTypes.bool,\n}\n\nexport default PopupWithForm;","import React                    from 'react';\nimport PropTypes                from 'prop-types';\nimport { useFormAndValidation } from '../hooks/useFormAndValidation';\nimport PopupWithForm            from './PopupWithForm';\nimport CurrentUserContext       from '../contexts/CurrentUserContext';\n\n/**\n * The **EditProfilePopup** component representing a popup with a form to update the current user data\n *\n * @version 1.0.1\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction EditProfilePopup(props) {\n  const {isOpen, isDataLoading, onClose, onUpdateUser}        = props;\n  const {values, isValid, errors, handleChange, resetForm}    = useFormAndValidation(['title', 'subtitle']);\n  const currentUser                                           = React.useContext(CurrentUserContext);\n\n  // Reset form values every time the popup opens\n  React.useEffect(() => {\n    const initialInputValues = {\n      title: currentUser.name || '',\n      subtitle: currentUser.about || '',\n    };\n    const initialErrorValues = {\n      title: '',\n      subtitle: '',\n    }\n    resetForm({...initialInputValues}, {...initialErrorValues}, true);\n  }, [isOpen, resetForm, currentUser]);\n\n  const handleInputChange = (e) => handleChange(e);\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    const {title, subtitle} = values;\n    if(isValid || (title && subtitle)){\n      onUpdateUser({name: title, about: subtitle});\n    }\n  }\n\n  const nameInputClassName = `popup__input ${(!isValid && errors.title) && `popup__input_type_error`}`;\n  const nameInputErrorClassName = `popup__error ${(!isValid && errors.title) && `popup__error_visible`}`;\n  const aboutInputClassName = `popup__input ${(!isValid && errors.subtitle) && `popup__input_type_error`}`;\n  const aboutInputErrorClassName = `popup__error ${(!isValid && errors.subtitle) && `popup__error_visible`}`;\n\n  return (\n    <PopupWithForm\n      name=\"profile\"\n      title=\"Edit profile\"\n      btnLabel={(isDataLoading) ? 'Saving': 'Save'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleFormSubmit} >\n\n        <input\n          className={nameInputClassName}\n          type=\"text\"\n          id=\"name-input\"\n          name=\"title\"\n          placeholder=\"Name\"\n          minLength=\"2\"\n          maxLength=\"40\"\n          onChange={handleInputChange}\n          value={values.title}\n          required />\n        <span id=\"name-input-error\" className={nameInputErrorClassName}>\n          {errors.title}\n        </span>\n\n        <input\n          className={aboutInputClassName}\n          type=\"text\"\n          id=\"about-input\"\n          name=\"subtitle\"\n          placeholder=\"About me\"\n          minLength=\"2\"\n          maxLength=\"200\"\n          onChange={handleInputChange}\n          value={values.subtitle}\n          required />\n        <span id=\"about-input-error\" className={aboutInputErrorClassName}>\n          {errors.subtitle}\n        </span>\n\n    </PopupWithForm>\n  );\n}\n\nEditProfilePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `PATCH` request to the API for updating the current user data  */\n  onUpdateUser    : PropTypes.func.isRequired,\n}\n\nexport default EditProfilePopup;","import React                    from 'react';\nimport PropTypes                from 'prop-types';\nimport { useFormAndValidation } from '../hooks/useFormAndValidation';\nimport PopupWithForm            from './PopupWithForm';\n\n/**\n * The **EditAvatarPopup** component representing a popup with a form to edit user avatar\n *\n * @version 1.0.1\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction EditAvatarPopup(props) {\n  const {isOpen, isDataLoading, onClose, onUpdateAvatar}  = props;\n  const {values, isValid, errors, handleChange, resetForm} = useFormAndValidation(['avatarlink']);\n\n   // Reset form values every time the popup opens\n  React.useEffect(() => {\n    const initialValues = {\n      avatarlink: '',\n    };\n    resetForm({...initialValues}, {...initialValues}, true);\n  }, [isOpen, resetForm]);\n\n  const handleInputChange = (e) => handleChange(e);\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    const { avatarlink } = values;\n    if(isValid || avatarlink){\n      onUpdateAvatar(avatarlink);\n    }\n  }\n\n  const linkInputClassName = `popup__input ${(!isValid && errors.avatarlink) && `popup__input_type_error`}`;\n  const linkInputErrorClassName = `popup__error ${(!isValid && errors.avatarlink) && `popup__error_visible`}`;\n\n  return (\n    <PopupWithForm\n      name=\"avatar\"\n      title=\"Change Profile Picture\"\n      btnLabel={(isDataLoading) ? 'Saving': 'Save'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleFormSubmit}>\n\n        <input\n          className={linkInputClassName}\n          type=\"url\"\n          id=\"avatarlink-input\"\n          name=\"avatarlink\"\n          placeholder=\"Image link\"\n          value={values.avatarlink}\n          onChange={handleInputChange}\n          required />\n        <span id=\"avatarlink-input-error\" className={linkInputErrorClassName}>\n          {errors.avatarlink}\n        </span>\n\n    </PopupWithForm>\n  );\n}\n\nEditAvatarPopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `PATCH` request to the API for updating the current user's avatar  */\n  onUpdateAvatar  : PropTypes.func.isRequired,\n}\n\nexport default EditAvatarPopup;","import React                    from 'react';\nimport PropTypes                from 'prop-types';\nimport { useFormAndValidation } from '../hooks/useFormAndValidation';\nimport PopupWithForm            from './PopupWithForm';\n\n/**\n * The **AddPlacePopup** component representing a popup with a form to add a new place\n *\n * @version 1.0.1\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction AddPlacePopup(props){\n  const {isOpen, isDataLoading, onClose, onAddPlace}  = props;\n  const {values, isValid, errors, handleChange, resetForm} = useFormAndValidation(['name', 'link']);\n\n  // Reset form values every time the popup opens\n  React.useEffect(() => {\n    const initialValues = {\n      name: '',\n      link: '',\n    };\n    resetForm({...initialValues}, {...initialValues}, true);\n  }, [isOpen, resetForm]);\n\n  const handleInputChange = (e) => handleChange(e);\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    const {name, link} = values;\n    if(isValid || (name && link)){\n      onAddPlace(name, link);\n    }\n  }\n\n  const placeInputClassName = `popup__input ${(!isValid && errors.name) && `popup__input_type_error`}`;\n  const placeInputErrorClassName = `popup__error ${(!isValid && errors.name) && `popup__error_visible`}`;\n  const linkInputClassName = `popup__input ${(!isValid && errors.link) && `popup__input_type_error`}`;\n  const linkInputErrorClassName = `popup__error ${(!isValid && errors.link) && `popup__error_visible`}`;\n\n  return (\n    <PopupWithForm\n      name=\"place\"\n      title=\"New Place\"\n      btnLabel={(isDataLoading) ? 'Creating': 'Create'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleFormSubmit}>\n\n        <input\n          className={placeInputClassName}\n          type=\"text\"\n          id=\"place-input\"\n          name=\"name\"\n          placeholder=\"Title\"\n          minLength=\"1\"\n          maxLength=\"30\"\n          value={values.name}\n          onChange={handleInputChange}\n          required />\n        <span id=\"place-input-error\" className={placeInputErrorClassName}>\n          {errors.name}\n        </span>\n\n        <input\n          className={linkInputClassName}\n          type=\"url\"\n          id=\"link-input\"\n          name=\"link\"\n          placeholder=\"Image link\"\n          value={values.link}\n          onChange={handleInputChange}\n          required />\n        <span id=\"link-input-error\" className={linkInputErrorClassName}>\n          {errors.link}\n        </span>\n\n    </PopupWithForm>\n  );\n}\n\nAddPlacePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `POST` request to the API for adding a new place  */\n  onAddPlace      : PropTypes.func.isRequired,\n}\n\nexport default AddPlacePopup;\n","import React          from \"react\";\nimport PropTypes      from 'prop-types';\nimport PopupWithForm  from \"./PopupWithForm\";\n\n/**\n * The **DeletePlacePopup** component representing a popup to confirm the deletion of the selected card\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction DeletePlacePopup(props){\n  const {card, isOpen, isDataLoading, onClose, onCardDelete} = props;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onCardDelete(card);\n  }\n\n  return (\n    <PopupWithForm\n      name=\"delete\"\n      title=\"Are you sure?\"\n      btnLabel={(isDataLoading) ? 'Deleting': 'Yes'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit} />\n  );\n}\n\nDeletePlacePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `DELETE` request to the API for deleting an existing image card */\n  onCardDelete    : PropTypes.func.isRequired,\n}\n\nexport default DeletePlacePopup;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport {Link}               from 'react-router-dom';\n\n/**\n * The **Form** component representing user authorization and registration related forms.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Form(props){\n  const {\n    name,\n    title,\n    btnLabel,\n    linkPath,\n    linkText,\n    onSubmit,\n    children,\n  }                                         = props;\n  const formRef                             = React.createRef();\n  const [isFormValid, setIsFormValid]       = React.useState(false);\n\n  const buttonClassName = `form__submit ${!isFormValid && `form__submit_disabled`}`;\n\n  const handleChange = () => {\n    setIsFormValid(formRef.current.checkValidity());\n  }\n\n  return (\n    <form\n      className=\"form\"\n      name={name}\n      action=\"#\"\n      ref={formRef}\n      onSubmit={onSubmit}\n      onChange={handleChange}\n      noValidate>\n\n      <h2 className=\"form__title\">{title}</h2>\n\n      {children}\n\n      <button className={buttonClassName} type=\"submit\" aria-label={`${btnLabel} ${name}`}>\n        {btnLabel}\n      </button>\n\n      <Link to={linkPath} className=\"form__link\">\n        {linkText}\n      </Link>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  /** A string representing the **name of the form** */\n  name                : PropTypes.string.isRequired,\n  /** A string representing the **title of the form** */\n  title               : PropTypes.string.isRequired,\n  /** A string representing the **label** of the Submit button */\n  btnLabel            : PropTypes.string.isRequired,\n  /** A string representing the **route path** of the link below the submit button */\n  linkPath            : PropTypes.string.isRequired,\n  /** A string representing the **text** of the link below the submit button */\n  linkText            : PropTypes.string.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit            : PropTypes.func.isRequired,\n  /** Any form elements like input, label, etc */\n  children            : PropTypes.any.isRequired,\n};\n\nexport default Form;\n","import React                    from 'react';\nimport PropTypes                from 'prop-types';\nimport { useFormAndValidation } from '../hooks/useFormAndValidation';\nimport Form                     from './Form';\n\n/**\n * The **Register** component representing user registration form.\n *\n * @version 1.0.1\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Register(props){\n  const {\n    isDataLoading,\n    onSubmit,\n    registerEmail,\n    setRegisterEmail,\n    registerPassword,\n    setRegisterPassword,\n  }  = props;\n  const {isValid, errors, handleChange, resetForm} = useFormAndValidation(['register-email', 'register-password']);\n\n  // Reset form values every time the popup opens\n  React.useEffect(() => {\n    const initialValues = {\n      'register-email': '',\n      'register-password': '',\n    };\n    setRegisterEmail('');\n    setRegisterPassword('');\n    resetForm({...initialValues}, {...initialValues}, true);\n  }, [resetForm, setRegisterEmail, setRegisterPassword]);\n\n  const handleInputChange = (e) => {\n    if(e.target.name === 'register-email'){\n      setRegisterEmail(e.target.value);\n    }\n    if(e.target.name === 'register-password'){\n      setRegisterPassword(e.target.value);\n    }\n    handleChange(e);\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if(isValid || (registerEmail && registerPassword)){\n      onSubmit({registerEmail, registerPassword});\n    }\n  }\n\n  const emailInputClassName = `form__input ${(!isValid && errors['register-email']) && `form__input_type_error`}`;\n  const emailErrorClassName = `form__error ${(!isValid && errors['register-email']) && `form__error_visible`}`;\n  const passwordInputClassName = `form__input ${(!isValid && errors['register-password']) && `form__input_type_error`}`;\n  const passwordErrorClassName = `form__error ${(!isValid && errors['register-password']) && `form__error_visible`}`;\n\n  return (\n    <div className=\"content\">\n      <section className='auth-form'>\n        <Form\n          name=\"register\"\n          title=\"Sign up\"\n          btnLabel={(isDataLoading) ? 'Signing up': 'Sign up'}\n          linkPath=\"/login\"\n          linkText=\"Already a member? Log in here!\"\n          onSubmit={handleFormSubmit}>\n\n          <input\n            className={emailInputClassName}\n            type=\"email\"\n            id=\"register-email\"\n            name=\"register-email\"\n            placeholder=\"Email\"\n            value={registerEmail}\n            onChange={handleInputChange}\n            required />\n          <span id=\"register-email-error\" className={emailErrorClassName}>\n              {errors['register-email']}\n          </span>\n\n          <input\n            className={passwordInputClassName}\n            type=\"password\"\n            id=\"register-password\"\n            name=\"register-password\"\n            placeholder=\"Password\"\n            value={registerPassword}\n            minLength=\"8\"\n            onChange={handleInputChange}\n            required />\n          <span id=\"register-password-error\" className={passwordErrorClassName}>\n              {errors['register-password']}\n          </span>\n\n        </Form>\n      </section>\n    </div>\n  );\n}\n\nRegister.propTypes = {\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading       : PropTypes.bool.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit            : PropTypes.func.isRequired,\n  /** A React component state representing the register email of the user */\n  registerEmail          : PropTypes.string.isRequired,\n  /** A React component state `registerEmail` setter callback to set the register email of the user */\n  setRegisterEmail       : PropTypes.func.isRequired,\n  /** A React component state representing the register password of the user */\n  registerPassword       : PropTypes.string.isRequired,\n  /** A React component state `registerPassword` setter callback to set the register password of the user */\n  setRegisterPassword    : PropTypes.func.isRequired,\n};\n\nexport default Register;\n","import React                    from 'react';\nimport PropTypes                from 'prop-types';\nimport { useFormAndValidation } from '../hooks/useFormAndValidation';\nimport Form                     from './Form';\n\n/**\n * The **Login** component representing user authorization or login form.\n *\n * @version 1.0.1\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Login(props){\n  const {\n    isDataLoading,\n    onSubmit,\n    loginEmail,\n    setLoginEmail,\n    loginPassword,\n    setLoginPassword,\n  }  = props;\n  const {isValid, errors, handleChange, resetForm} = useFormAndValidation(['login-email', 'login-password']);\n\n  // Reset form values every time the popup opens\n  React.useEffect(() => {\n    const initialValues = {\n      'login-email': '',\n      'login-password': '',\n    };\n    setLoginEmail('');\n    setLoginPassword('');\n    resetForm({...initialValues}, {...initialValues}, true);\n  }, [resetForm, setLoginEmail, setLoginPassword]);\n\n  const handleInputChange = (e) => {\n    if(e.target.name === 'login-email'){\n      setLoginEmail(e.target.value);\n    }\n    if(e.target.name === 'login-password'){\n      setLoginPassword(e.target.value);\n    }\n    handleChange(e);\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if(isValid || (loginEmail && loginPassword)){\n      onSubmit({loginEmail, loginPassword});\n    }\n  }\n\n  const emailInputClassName = `form__input ${(!isValid && errors['login-email']) && `form__input_type_error`}`;\n  const emailErrorClassName = `form__error ${(!isValid && errors['login-email']) && `form__error_visible`}`;\n  const passwordInputClassName = `form__input ${(!isValid && errors['login-password']) && `form__input_type_error`}`;\n  const passwordErrorClassName = `form__error ${(!isValid && errors['login-password']) && `form__error_visible`}`;\n\n  return (\n    <div className=\"content\">\n      <section className='auth-form'>\n        <Form\n          name=\"login\"\n          title=\"Log in\"\n          btnLabel={(isDataLoading) ? 'Logging in': 'Log in'}\n          linkPath=\"/register\"\n          linkText=\"Not a member yet? Sign up here!\"\n          onSubmit={handleFormSubmit}>\n\n          <input\n            className={emailInputClassName}\n            type=\"email\"\n            id=\"login-email\"\n            name=\"login-email\"\n            placeholder=\"Email\"\n            value={loginEmail}\n            onChange={handleInputChange}\n            required />\n          <span id=\"login-email-error\" className={emailErrorClassName}>\n              {errors['login-email']}\n          </span>\n\n          <input\n            className={passwordInputClassName}\n            type=\"password\"\n            id=\"login-password\"\n            name=\"login-password\"\n            placeholder=\"Password\"\n            value={loginPassword}\n            minLength=\"8\"\n            onChange={handleInputChange}\n            required />\n          <span id=\"login-password-error\" className={passwordErrorClassName}>\n              {errors['login-password']}\n          </span>\n\n        </Form>\n      </section>\n    </div>\n  );\n}\n\nLogin.propTypes = {\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading       : PropTypes.bool.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit            : PropTypes.func.isRequired,\n  /** A React component state representing the login email of the user */\n  loginEmail          : PropTypes.string.isRequired,\n  /** A React component state `loginEmail` setter callback to set the login email of the user */\n  setLoginEmail       : PropTypes.func.isRequired,\n  /** A React component state representing the login password of the user */\n  loginPassword       : PropTypes.string.isRequired,\n  /** A React component state `loginPassword` setter callback to set the login password of the user */\n  setLoginPassword    : PropTypes.func.isRequired,\n};\n\nexport default Login;\n","export default __webpack_public_path__ + \"static/media/register-success.1b6082f8.svg\";","export default __webpack_public_path__ + \"static/media/register-failure.df8eddf6.svg\";","import React              from 'react';\nimport PropTypes          from 'prop-types';\nimport registerSuccess    from '../images/register-success.svg';\nimport registerFailure    from '../images/register-failure.svg';\n\n/**\n * The **InfoTooltip** component representing a popup to tell the status of user registration\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction InfoTooltip(props){\n  const {\n    name,\n    isOpen,\n    isSuccess,\n    onClose,\n  } = props;\n\n  const tooltipImg = `${(isSuccess) ? registerSuccess : registerFailure}`;\n  const tooltipMsg = `${(isSuccess)\n    ? `Success! You have now been registered.`\n    : `Oops, something went wrong! Please try again.`}`;\n\n  return (\n    <div className={`popup popup_rel_${name} ${isOpen && 'popup_opened'}`}>\n      <div className=\"popup__container\">\n        <img className=\"popup__tooltip-img\" src={tooltipImg} alt=\"Tooltip icon\" />\n        <p className=\"popup__tooltip-msg\">{tooltipMsg}</p>\n        <button\n          className=\"popup__tooltip-close-btn\"\n          type=\"button\"\n          aria-label=\"Close popup\"\n          onClick={onClose}>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nInfoTooltip.propTypes = {\n  /** A string representing the **name of the popup** */\n  name            : PropTypes.string.isRequired,\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the user registration was successful or not */\n  isSuccess       : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n}\n\nexport default InfoTooltip;\n","import React from 'react';\n\n/**\n * The **Footer** component representing the footer of the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <p className=\"footer__text\">© {new Date().getFullYear()} Around The U.S.</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React              from 'react';\nimport PropTypes          from 'prop-types';\nimport {Route, Redirect}  from 'react-router-dom';\n\n/**\n * The **ProtectedRoute* component representing a route accessible to only logged in users\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction ProtectedRoute({children, isLoggedIn, ...restProps}) {\n  return (\n    <Route {...restProps}>\n      {\n        isLoggedIn\n        ? children\n        : <Redirect to=\"/login\" />\n      }\n    </Route>\n  );\n}\n\nProtectedRoute.propTypes = {\n  /** Any HTML or React Component that are children of ProtectedRoute component */\n  children: PropTypes.any.isRequired,\n  /** A boolean indicating if the user is logged in or not */\n  isLoggedIn: PropTypes.bool.isRequired,\n  /** An object containing the remaining props passed to ProtectedRoute component */\n  restProps: PropTypes.object,\n}\n\nexport default ProtectedRoute;\n","/**\n * This module takes care of all the requests made to the API - https://around.nomoreparties.co\n * @module Api\n */\n\n/** Class representing all the API related requests */\nclass Api {\n  /**\n   * Sets the base URL and header authorization token for the API endpoints.\n   * @param {options} obj - An object having the base URL and headers\n   */\n  constructor(options){\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  /**\n   * Checks the server's response of the Fetch API call to tell whether it was successful or not.\n   * @param {Object} response The response of the Fetch API call.\n   * @return {Object} If the response was successful, returns the JSON else a Promise object with a given reason.\n   */\n  _checkResponseStatus = response => {\n    return (response.ok)\n      ? response.json()\n      : Promise.reject(`Error Code: ${response.status} | Error Message: ${response.statusText}`);\n  }\n\n  /**\n   * Get initial image cards from the server using a GET request.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  getInitialCards = () => {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Adds a new image card to the server using a POST request.\n   * @param {string} cardName The name of the place in the new image card.\n   * @param {string} cardPicUrl The URL of the picture in the new image card.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  addNewCard = (cardName, cardPicUrl) => {\n    return fetch(`${this._baseUrl}/cards`,{\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardName,\n        link: cardPicUrl\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Deletes an existing image card from the server using a DELETE request.\n   * @param {string} cardId The id of image card to be deleted.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  deleteCard = cardId => {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Changes the like status of an existing image card from the server using a PUT | DELETE request.\n   * @param {string} cardId The id of image card to be liked.\n   * @param {boolean} isLiked Whether the image card has been liked already\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  changeLikeCardStatus = (cardId, isLiked) => {\n    const method = (isLiked) ? 'DELETE' : 'PUT';\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method,\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Get the current user data from the server using a GET request.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  getUserData = () => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Updates the current user data from the server using a PATCH request.\n   * @param {string} title The new title or name of the current user.\n   * @param {string} subtitle The new subtitle or about info of the current user.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  updateUserData = ({name, about}) => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about,\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Updates the current user's avatar from the server using a PATCH request.\n   * @param {string} newAvatarUrl The new URL of the user avatar.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  updateUserAvatar = newAvatarUrl => {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: newAvatarUrl,\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n}\n\nexport default new Api({\n  baseUrl: \"https://around.nomoreparties.co/v1/group-12\",\n  headers: {\n    authorization: \"9bc9c0f1-5a8a-40aa-b985-20e7b24d1389\",\n    \"Content-Type\": \"application/json\"\n  }\n});","/**\n * This module enables API requests related to registration and authorization using API - https://register.nomoreparties.co\n * @module Auth\n */\n\n/** Class representing all the registration and authorization related requests */\nclass Auth {\n  constructor(options){\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  /**\n   * Checks the server's response of the Fetch API call to tell whether it was successful or not.\n   * @param {Object} response The response of the Fetch API call.\n   * @return {Object} If the response was successful, returns the JSON else a Promise object with a given reason.\n   */\n  _checkResponseStatus = response => {\n    if(response.ok){\n      return response.json();\n    }\n    return Promise.reject(response);\n  }\n\n  /**\n   * Register new user to the server using a POST request.\n   * @param {string} email The email ID of the user trying to register.\n   * @param {string} password The password of the user trying to register.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  register = (email, password) => {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password,\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Login a registered user to the server using a POST request.\n   * @param {string} email The email ID of the user trying to login.\n   * @param {string} password The password of the user trying to login.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  login = (email, password) => {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password,\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Validate a registered user's token to the server using a GET request.\n   * @param {string} userToken The token of the user trying to validate.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  validateUserToken = (userToken) => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        ...this._headers,\n        \"Authorization\" : `Bearer ${userToken}`,\n      }\n    })\n      .then(this._checkResponseStatus);\n  }\n}\n\nexport default new Auth({\n  baseUrl: \"https://register.nomoreparties.co\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n","import React                from 'react';\nimport\n{\n  Switch,\n  Route,\n  useHistory,\n}                           from 'react-router-dom';\nimport Header               from './Header';\nimport Main                 from './Main';\nimport ImagePopup           from './ImagePopup';\nimport EditProfilePopup     from './EditProfilePopup';\nimport EditAvatarPopup      from './EditAvatarPopup';\nimport AddPlacePopup        from './AddPlacePopup';\nimport DeletePlacePopup     from './DeletePlacePopup';\nimport Register             from './Register';\nimport Login                from './Login';\nimport InfoTooltip          from './InfoTooltip';\nimport Footer               from './Footer';\nimport ProtectedRoute       from './ProtectedRoute';\nimport api                  from '../utils/api';\nimport auth                 from '../utils/auth';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The main React **App** component.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction App() {\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen]   = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen]     = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen]         = React.useState(false);\n  const [isPreviewPlacePopupOpen, setIsPreviewPlacePopupOpen] = React.useState(false);\n  const [isDeletePlacePopupOpen, setIsDeletePlacePopupOpen]   = React.useState(false);\n  const [isInfoTooltipPopupOpen, setIsInfoTooltipPopupOpen]   = React.useState(false);\n  const [userRegisterStatus, setUserRegisterStatus]           = React.useState(false);\n  const [isDataLoading, setIsDataLoading]                     = React.useState(false);\n  const [selectedCard, setSelectedCard]                       = React.useState(null);\n  const [selectedToDeleteCard, setSelectedToDeleteCard]       = React.useState(null);\n  const [cards, setCards]                                     = React.useState([]);\n  const [currentUser, setCurrentUser]                         = React.useState({});\n  const [currentUserEmail, setCurrentUserEmail]               = React.useState('');\n  const [isLoggedIn, setIsLoggedIn]                           = React.useState(false);\n  const [registerEmail, setRegisterEmail]                     = React.useState('');\n  const [registerPassword, setRegisterPassword]               = React.useState('');\n  const [loginEmail, setLoginEmail]                           = React.useState('');\n  const [loginPassword, setLoginPassword]                     = React.useState('');\n  const history                                               = useHistory();\n\n// ********************************************************************************************* //\n//                      Fetch initial cards & user data on page load                             //\n// ********************************************************************************************* //\n  React.useEffect(() => {\n    api\n      .getInitialCards()\n        .then(setCards)\n        .catch(err => {\n          console.log(\"Uh-oh! Error occurred while fetching the existing cards from the server.\");\n          console.log(err);\n        });\n  }, []);\n\n  React.useEffect(() => {\n    api\n      .getUserData()\n      .then(res => setCurrentUser(res))\n      .catch(err => {\n        console.log(\"Uh-oh! Error occurred while fetching the current user data from the server.\");\n        console.log(err);\n      });\n  }, []);\n\n// ********************************************************************************************* //\n//                        Handle mouse click or Esc key down event                               //\n// ********************************************************************************************* //\n  const isAnyPopupOpen = (\n    isEditProfilePopupOpen\n    || isEditAvatarPopupOpen\n    || isAddPlacePopupOpen\n    || isPreviewPlacePopupOpen\n    || isDeletePlacePopupOpen\n    || isInfoTooltipPopupOpen);\n\n  React.useEffect(() => {\n    const handleClickClose = e => {\n      if(e.target.classList.contains('popup_opened')) {\n        closeAllPopups();\n      }\n    }\n\n    const handleEscClose = e => {\n      if(e.key === \"Escape\"){\n        closeAllPopups();\n      }\n    }\n\n    if(isAnyPopupOpen){\n        document.addEventListener(\"click\", handleClickClose);\n        document.addEventListener(\"keydown\", handleEscClose);\n    }\n\n    return () => {\n      document.removeEventListener(\"click\", handleClickClose);\n      document.removeEventListener(\"keydown\", handleEscClose);\n    }\n  }, [isAnyPopupOpen] );\n\n  const closeAllPopups = () => {\n    setIsEditProfilePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsPreviewPlacePopupOpen(false);\n    setIsDeletePlacePopupOpen(false);\n    setIsInfoTooltipPopupOpen(false);\n    setSelectedCard(null);\n    setSelectedToDeleteCard(null);\n  }\n\n// ********************************************************************************************* //\n//                         Handle all the events on the web page                                 //\n// ********************************************************************************************* //\n  const handleEditProfileClick = () => setIsEditProfilePopupOpen(true);\n  const handleEditAvatarClick = () => setIsEditAvatarPopupOpen(true);\n  const handleAddPlaceClick = () => setIsAddPlacePopupOpen(true);\n\n  const handleCardClick = card => {\n    setSelectedCard(card);\n    setIsPreviewPlacePopupOpen(true);\n  };\n\n  const handleCardDeleteClick = card => {\n    setSelectedToDeleteCard(card);\n    setIsDeletePlacePopupOpen(true);\n  };\n\n  const handleCardLike = card => {\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    api\n      .changeLikeCardStatus(card._id, isLiked)\n        .then(newCard =>\n          setCards(state => state.map(c => c._id === card._id ? newCard : c)))\n        .catch(err => {\n          console.log('Uh-oh! Error occurred while changing the like status of the card.');\n          console.log(err);\n        });\n  }\n\n  const handleCardDeleteSubmit = card => {\n    setIsDataLoading(true);\n    api\n      .deleteCard(card._id)\n        .then(() => {\n          setCards(state => state.filter(c => c._id !== card._id));\n          closeAllPopups();\n        })\n        .catch(err => {\n          console.log('Uh-oh! Error occurred while deleting the selected card from the server.');\n          console.log(err);\n        })\n        .finally(() => setIsDataLoading(false));\n  }\n\n  const handleUpdateUser = userData => {\n    setIsDataLoading(true);\n    api\n      .updateUserData(userData)\n      .then(updatedUserData => {\n        setCurrentUser(updatedUserData);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log('Uh-oh! Error occurred while updating the user data to the server.');\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const handleUpdateAvatar = newAvatarUrl => {\n    setIsDataLoading(true);\n    api\n      .updateUserAvatar(newAvatarUrl)\n      .then(updatedUserData => {\n        setCurrentUser(updatedUserData);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log('Uh-oh! Error occurred while updating the user avatar to the server.');\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const handleAddPlaceSubmit = (cardName, cardImageLink) => {\n    setIsDataLoading(true);\n    api\n      .addNewCard(cardName, cardImageLink)\n      .then(newCard => {\n        setCards([newCard, ...cards]);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log('Uh-oh! Error occurred while adding a new card to the server.');\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const handleRegisterSubmit = () => {\n    setIsDataLoading(true);\n    auth\n      .register(registerEmail, registerPassword)\n      .then(() => {\n        setUserRegisterStatus(true);\n        history.push('/login');\n      })\n      .catch(err => {\n        setUserRegisterStatus(false);\n        console.log('Uh-oh! Error occurred while registering a new user.');\n        if(err.status === 400){\n          console.log('One of the fields was filled in incorrectly while user registration.');\n        }\n      })\n      .finally(() => {\n        setIsDataLoading(false);\n        setIsInfoTooltipPopupOpen(true);\n        // Close the InfoTooltip popup after 2 sec\n        let timeoutId = null;\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          setIsInfoTooltipPopupOpen(false);\n        }, 2000);\n      });\n  }\n\n  const handleLoginSubmit = () => {\n    setIsDataLoading(true);\n    auth\n      .login(loginEmail, loginPassword)\n      .then(res => {\n        if(!res.token){\n          return;\n        }\n        localStorage.setItem('token', res.token);\n        setCurrentUserEmail(loginEmail);\n        setLoginEmail('');\n        setLoginPassword('');\n        setIsLoggedIn(true);\n        history.push('/');\n      })\n      .catch(err => {\n        console.log('Uh-oh! Error occurred while logging in.');\n        if(err.status === 400){\n          console.log('One or more of the fields were not provided while logging in.');\n        }\n        if(err.status === 401){\n          console.log('The user with the specified email not found.');\n        }\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const validateToken = React.useCallback(() => {\n    const jwt = localStorage.getItem('token');\n    if(jwt){\n      auth\n        .validateUserToken(jwt)\n        .then(res => {\n          if(!res){\n            return;\n          }\n          setCurrentUserEmail(res.data.email);\n          setIsLoggedIn(true);\n          history.push('/');\n        })\n        .catch(err => {\n          console.log('Uh-oh! Error occurred while validating token.');\n          if(err.status === 400){\n            console.log('Token not provided or provided in the wrong format.');\n          }\n          if(err.status === 401){\n            console.log('The provided token is invalid.');\n          }\n        });\n    }\n  }, [history]);\n\n  const handleLogOut = () => {\n    localStorage.removeItem('token');\n    history.push('/login');\n    setIsLoggedIn(false);\n    setCurrentUserEmail('');\n  }\n\n// ********************************************************************************************* //\n//                                Validate user token on page load                               //\n// ********************************************************************************************* //\n  React.useEffect(() => {\n    validateToken();\n  }, [validateToken]);\n\n// ********************************************************************************************* //\n//                 Create props objects to pass to the React Components                          //\n// ********************************************************************************************* //\n  const propsForMain = {\n    onEditProfileClick: handleEditProfileClick,\n    onAddPlaceClick:    handleAddPlaceClick,\n    onEditAvatarClick:  handleEditAvatarClick,\n    onCardClick:        handleCardClick,\n    onCardDeleteClick:  handleCardDeleteClick,\n    onCardLike:         handleCardLike,\n    cards,\n  };\n\n  const propsForEditAvatarPopup = {\n    isOpen:         isEditAvatarPopupOpen,\n    isDataLoading:  isDataLoading,\n    onClose:        closeAllPopups,\n    onUpdateAvatar: handleUpdateAvatar,\n  };\n\n  const propsForEditProfilePopup = {\n    isOpen:         isEditProfilePopupOpen,\n    isDataLoading:  isDataLoading,\n    onClose:        closeAllPopups,\n    onUpdateUser:   handleUpdateUser,\n  };\n\n  const propsForAddPlacePopup = {\n    isOpen:         isAddPlacePopupOpen,\n    isDataLoading:  isDataLoading,\n    onClose:        closeAllPopups,\n    onAddPlace:     handleAddPlaceSubmit,\n  }\n\n  const propsForImagePopup = {\n    card:     selectedCard,\n    onClose:  closeAllPopups,\n  }\n\n  const propsForDeletePlacePopup = {\n    card:           selectedToDeleteCard,\n    isOpen:         isDeletePlacePopupOpen,\n    isDataLoading:  isDataLoading,\n    onClose:        closeAllPopups,\n    onCardDelete:   handleCardDeleteSubmit,\n  }\n\n  const propsForRegister = {\n    isDataLoading,\n    onSubmit: handleRegisterSubmit,\n    registerEmail,\n    setRegisterEmail,\n    registerPassword,\n    setRegisterPassword,\n  }\n\n  const propsForLogin = {\n    isDataLoading,\n    onSubmit: handleLoginSubmit,\n    loginEmail,\n    setLoginEmail,\n    loginPassword,\n    setLoginPassword,\n  }\n\n  const propsForHeaderRegister = {\n    isLoggedIn,\n    linkPath: '/login',\n    linkText: 'Log in',\n  }\n\n  const propsForHeaderLogin = {\n    isLoggedIn,\n    linkPath: '/register',\n    linkText: 'Sign up',\n  }\n\n  const propsForHeaderProtected = {\n    isLoggedIn,\n    linkText: 'Log out',\n    userEmail: currentUserEmail,\n    onLogOut: handleLogOut,\n  }\n\n  const propsForInfoTooltip = {\n    name:         'tooltip',\n    isOpen:       isInfoTooltipPopupOpen,\n    isSuccess:    userRegisterStatus,\n    onClose:      closeAllPopups,\n  }\n\n// ********************************************************************************************* //\n//                       Return different views of the application                               //\n// ********************************************************************************************* //\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <div className=\"page__wrapper\">\n          <Switch>\n            <Route path=\"/register\">\n              <Header {...propsForHeaderRegister} />\n              <Register {...propsForRegister} />\n            </Route>\n            <Route path=\"/login\">\n              <Header {...propsForHeaderLogin} />\n              <Login {...propsForLogin} />\n            </Route>\n            <ProtectedRoute exact path=\"/\" isLoggedIn={isLoggedIn}>\n              <Header {...propsForHeaderProtected} />\n              <Main {...propsForMain} />\n              <EditAvatarPopup {...propsForEditAvatarPopup} />\n              <EditProfilePopup {...propsForEditProfilePopup} />\n              <AddPlacePopup {...propsForAddPlacePopup} />\n              <ImagePopup {...propsForImagePopup} />\n              <DeletePlacePopup {...propsForDeletePlacePopup} />\n              <Footer />\n            </ProtectedRoute>\n          </Switch>\n          <InfoTooltip {...propsForInfoTooltip} />\n        </div>\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n","import React            from 'react';\nimport ReactDOM         from 'react-dom';\nimport {BrowserRouter}  from 'react-router-dom';\nimport App              from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/react-around-auth\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}